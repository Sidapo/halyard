// -*- Mode: Text; tab-width: 4; -*-

Table of Contents
-----------------

  * History
  * Checking 5L Out of CVS
  * Building Win32 5L
  * Building Macintosh 5L
  * What Lives Where
  * Important Classes & Modules
  * Testing Your Changes
  * Coding Conventions
  * Checking in Your Changes to 5L
  * Updating the Version Number
  * Ancient Versions

History
-------

  5L has its roots in a 16-bit DOS laserdisc application, and earlier
  multimedia-program-specific runtimes before that.  The current
  code base contains fragments dating back to at least 1993 and perhaps
  earlier.  5L has been worked on by many programmers over the years.
  One of the most prolific programmers in the late 90s and early 2000 was
  Chuck Officer.

Checking 5L Out of SVN
----------------------

  Check out the following from Subversion (see instructions elswhere
  for setting up Subversion):
  svn+ssh://imlcvs.hitchcock.org/var/lib/svn/main/public/5L/trunk
  svn+ssh://imlcvs.hitchcock.org/var/lib/svn/main/programs/tamale_test/trunk
  svn+ssh://imlcvs.hitchcock.org/var/lib/svn/main/tools
  svn+ssh://imlcvs.hitchcock.org/var/lib/svn/main/public/buildscript/trunk

  In the instructions that follow, we'll assume your copy of the 5L source
  tree is in $5L_DIR and your copy of tamale_test is in $5LTEST_DIR.

Building Win32 5L
-----------------

  Using the System control panel, set the environment variable WXWIN to
  $5L_DIR/libs/wxWidgets.

  Install Visual C++.NET 2005 off of the Microsoft Campus Agreement.
  Make sure you have everyting related to C++ development, but you can
  turn off all other parts of Visual Studio (like SQL server, C#, and
  all that junk).

  You will need to install the DirectX _9_ SDK, because certain
  libraries have been moved out of the platform SDK into DirectX.
  More recent versions of the DirectX SDK are incompatible with
  Windows 2000. You can find the DirectX 9 SDK in Subversion, at
  tools/build/dx9sdk.exe. Install it into C:\sdk\dx9\.

  Next, download and install the QuickTime 6 SDK.  This can be found
  on Apple's FTP site, at
  <ftp://ftp.apple.com/developer/Development_Kits/QT6SDK_Win.zip>, and
  if not there, it's under tools/build/QT6SDK_Win.zip.  Unzip it in
  C:\sdk (or anywhere else you like, but then you'll have to adapt the
  instructions below). Make sure QuickTime is installed as well,
  including the VP3 codec. The best way to install the VP3 codec is to
  run the installer of one of our existing programs, such as VTRA.

  Open up $5L_DIR\5L.sln. Select Tools > Options > Projects and
  Solutions > VC++ Directories, and add the follow directories to the
  following categories:

    Include files:
	  C:\sdk\QT6 SDK (Win)\Interfaces & Libraries\QTDevWin\CIncludes
	  C:\sdk\QT6 SDK (Win)\Interfaces & Libraries\QTDevWin\ComponentIncludes
      C:\sdk\dx9\Include
    Library files:
	  C:\sdk\QT6 SDK (Win)\Interfaces & Libraries\QTDevWin\Libraries
      C:\sdk\dx9\Lib
    Executable files:
	  C:\sdk\QT6 SDK (Win)\Interfaces & Libraries\QTDevWin\Tools

  Click on "Solution Explorer", right-click on "wx5L", and
  select "Properties" > "Configuration: Debug" > "Debugging".  
  Set "Working Directory" to $5LTEST_DIR (the actual path,
  not the variable name!).  Select "Configuration: Release" and
  set "Working Directory" to the same value.  Now you'll automatically
  run 5Ltest when you ask Visual Studio to launch your program.

  Using a similar process, set the working directories for both versions
  of "CommonTest" to $5L_DIR/Common.  The test suites won't run without
  this step. Also add "--wait" to the command arguments of CommonTest, in 
  both the debug and release builds, so you can see the results of the test
  suites. 

  You may also need to look at $5L_DIR/libs/quake2/README-WX.txt. It
  will explain how to set up MSVC with the assembler support to build
  Quake.

  Make sure "Debug" is selected in the "Solution Configurations" popup
  on your toolbar. In the "Solution Explorer", right click on "wx5L"
  and select "Set as StartUp Project". You should now be able to build
  and run 5L by clicking on the "Start" icon (it looks like a play
  button or right facing triangle). If you want to build a component
  without running it, you can select "Build <component>" from the
  build menu, or add the build button to your toolbar by right
  clicking on the toolbar and selecting "Build". 

  To build the release version, select "Release" from the "Solution
  Configurations" popup on your toolbar and follow the same steps as
  above.

  To run the test suites, right click on "CommonTest" and select "Set
  as StartUp Project". Make sure the appropriate configuration is
  selected, debug or release. You'll need to run each of them before
  each check in.

Rake
----

  In order to build released version of the engine, install new
  engines in a program directory, and have an easier time of testing
  Runtime changes, you'll need to install ruby and Rake. Install ruby
  from Cygwin, install RubyGems from <http://rubygems.org/>, set your
  RUBYOPT environment variable to rubygems, and run 'gem install
  rake'.

Building Macintosh 5L
---------------------

  Mac5L is not currently supported.  Feel free to do a port.

Source Documentation
--------------------

Tamale is documented using doxygen, an excellent, open source documentation
generator for C++.  You can get beautiful documentation for the entire
codebase--with diagrams--by installing and running doxygen.  See
doc/README.txt for details.

You can also configure doxygen to generate annotated, cross-referenced
source code and call graphs.

What Lives Where
----------------

  libs/               - 3rd-party libraries
  libs/crypto/        - Miscellaneous 3rd-party crypto code
  libs/freetype2/     - 3rd-party font engine
  libs/plt/           - MzScheme interpreter, etc.
  libs/wxWidgets/     - Portable GUI library
  libs/...            - Lots of other stuff

  Common/             - Shared, portable code
  Common/Runtime/5L/  - Scheme language runtime support
  Common/Runtime/*/   - Other MzScheme-derived runtime goodies
  Common/Scripts/     - Test scripts
  Common/Fonts/       - Unix-style fonts for FreeType 2
  Common/fonttools/   - Font-related programs (some are Linux-only)

  Win32/              - Win32 engine
  Win32/Bin/          - Win32 binaries

  Mac/                - Mac OS 9 and Carbon engine
  Mac/Bin/            - Mac binaries

  wx/                 - Preliminary (portable?) front-end based on wxWidgets
  wx/MSVC             - MSVC project files
  wx/gui              - DialogBlocks source files for dialogs
  wx/src              - Source code to new front end

Important Classes & Modules
---------------------------

  * TCommon.h, TPlatform.h
    - Lots of defines and portability stuff.

  * TPoint, TRect
    - Fairly featureful points and rectangles.

  * FileSystem, GraphicsTools
    - New portable libraries for pathnames and graphics.  Use these.

  * Typography, TStyleSheet
    - Portable, anti-aliased text service based on FreeType.  Not as
      nice as pango, but it doesn't require nearly as much support code.

  * TException
    - Parent class of most 5L exceptions.
    - Use exceptions for error-handling in new code.
    - Not all old code is exception-safe, so be careful.
  
  * TLogger
    - The logging and error-reporting subsystem.
    - Use this if you need to abort the program, or show errors to the user.

  * TInterpreter
    - Abstract interface to interchangeable interpreters.
    - Subclass this to add a new language.

  * TInterpreterManager
    - Manages interpreters and implements script reloading.
    - Subclass this to add a new language.

  * TPrimitives, TCommonPrimitives, TWxPrimitives, etc.
    - Implementations of the actual 5L commands.

  * TStartup
    - Initializes the Common library.

  * FiveLApp
    - wxWidgets application class

  * StageFrame
    - Our main GUI frame

  * Stage
    - The actual spot we display content

  * Element
    - Superclass of independent objects which appear on stage

  We have merged the old Macintosh and Windows code into a portable
  engine based on wxWidgets.  This process began in early 2002.

Coding Conventions
------------------

  The 5L source includes a wide variety of coding styles.  In general, you
  should either (1) immitate the locally-prevailing style when making small
  changes to existing code or (2) use the officially approved coding style
  (below) when making big changes or writing new code.  Please DO NOT use
  non-standard styles in new code; the tree is inconsistent enough as is.

  For a small example class (showing reasonably good style), see
  Common/TException.{h,cpp}.

  All files should begin with the following comment, which should make
  Emacs Do The Right Thing<tm> on most systems:

    // -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-

  Tabs are four spaces wide, blocks are indented four spaces, and braces
  always appear on their own line.  The keywords "public:", "private:" and
  "protected:" should be flush with the "class" keyword, not indented an
  extra level.  Continued expressions should be indented Emacs-style:

  int long_name = munge(really_long_name,
                        another_really_long_name);

  Global variables are named with a "g" prefix, static variables with an
  "s" prefix, and local variables with an "m" prefix (although a few
  classes use different conventions, and it's best to follow conventions
  within a class--I've seen both "m_" and "its" prefixes).  Input
  parameters have a "in" prefix, output parameters have an "out" prefix,
  and input/ouput parameters have an "io" prefix.

  Publically-visible names use lowercase interior capitals and no
  underscores (i.e. studlyCaps).  Functions names should have initial
  capitals; variable names shouldn't.  Local variables may optionally use
  all lowercase names with internal underscores.  Preprocessor macros
  follow the usual convention.  Examples:

    MyClass
    GlobalFunction
    gGlobalVariable
    mMemberVariable
    sStaticVariable
    inInputParameter
    outOutputParameter
    ioInputOutputParameter
    local_variable
    PREPROCESSOR_MACRO

  Class and method comments should obey Doxygen conventions and match
  the surrounding code.

  Code is 79 columns wide or less!

Testing Your Changes
--------------------

  We have two test suites: "TestAll", which is a fully-automated, low-level
  test suite (as advocated by the eXtreme Programming folks), and
  "tamale_test", an interactive, high-level test script written in 5L.

  * Updating "TestAll"  

  Let's say you've added a new data structure, FooList, to the Common
  directory.  You should create a file named "FooListTests.cpp", and fill
  it full of tests.  Take a look at TStringTests.cpp for a good example.
  There's an art to writing good tests: You get all the common behaviors
  and corner cases, but you shouldn't write zillions of tests which prove
  nothing.

  For bonus points, write your tests *before* adding new features.

  Hook your test cases into TestAll.cpp.  You can figure out how to
  do this by looking at the source.

  * Updating "tamale_test"

  Unfortunately, "TestAll" still can't test lots of things:
  primitives, graphics, platform-specific code, etc.  In these cases,
  add one or more new cards to tamale_test and hook them into the main
  menu.  In order to test changes you've made to the Runtime
  directory, make those changes in $5L_DIR, and then run 'rake
  copy_runtime' in the $5LTEST_DIR.

  Be sure to include a good description of how to use your test card!
  Anybody at IML should be able to read instructions on the screen and
  tell whether or not the test card is working.  (We have lots of older
  test cards without such helpful documentation; these are real problems
  when testing.

Checking in Your Changes to 5L
------------------------------

  1) Decide whether you want to update the 5L version number.  If so, see
     the instructions below.

  2) Run 'rake'.  This will build all versions of the application and run
     the test suites.  (If you're planning to make a release build, you
     should probably run 'rake clean test' instead.)

  3) Run the debug and release versions of the application, and look at any
     relevant tamale_test cards.

  4) If you're using Windows, MAKE SURE YOU SAVE YOUR WORKSPACE, or else
     Subversion won't know about any changes.

  5) Make sure you've issued all the necessary "svn add" and "svn remove"
     commands.  Read your Subversion diffs.

  6) Update $5L_DIR/Release-Notes.txt.  If you're not creating a new
     version number, just use "HEAD" as a placeholder instead.

  7) Check in your changes.  If you haven't assigned a new version number,
     try to avoid checking in the contents of Mac/Bin or Win32/Bin.  If you
     *have* assigned a version number, you MUST check in the contents of
     those directories.

     Write a good Subversion comment.  It should be useful, informative and
     reasonably detailed.  It should generally use complete sentences and
     good grammar.  You're writing for posterity.

  8) If you've assigned a version number to your changes, tag the entire
     $5L_DIR tree AFTER checking it in.  The Rakefile can do this for you;
     see below.  DO NOT FORGET THIS STEP OR PEOPLE WILL GET VERY GRUMPY
     AND SAY BAD THINGS ABOUT YOU MANY YEARS FROM NOW.

  9) Check in tamale_test, too, if you've made any changes.

  Here's a typical checkin command:

  $ svn update
  $ rake clean test
  # Smoke-test GUI by hand
  $ svn commit # ...with appropriate arguments
  $ rake tag AS=0.0.60

Updating the Version Number
---------------------------

  5L uses Linux-style version numbers.  That means versions have the form
  "X.Y.Z", where X is the "major version", Y is the "minor version" and "Z"
  is the "revision".  (Actually, there will sometimes be an extra number
  after the revision, if somebody is working on a branch).  X, Y, and Z
  count up from 0: 0, 1, 2, ..., 9, 10, 11, etc.

  1) Update Common/TVersion.h.  The version appears in two places.

  2) While there, check the copyright
     date; it should be of the form "1993-YYYY", where YYYY is the current
     year.  The lawyers like this to be correct.  You might also want to
     take a look at tools/fix-prologues.pl.

Copying an Engine Build into a Script
-------------------------------------

  Consult the Rakefile of any recent project for the latest Subversion
  gymnastics.  Basically, you need to replace the script's copy of the
  Runtime directory, the Fonts directory, and any *.exe and *.dll files
  found in Win32/Bin.

  The process looks something like this:

  $ rake rm_engine_dirs_and_commit
  $ rake update_engine TO=0.0.60
  # Smoke test...
  $ svn commit # ...appropriate arguments...

Ancient Versions
----------------

  We shipped Genetics in Clinical Practice on top of an older engine (early
  2002) which has substantially more primitive build and testing procedures.
  Also, this engine exists in entirely separate Windows and Macintosh
  versions, with no shared code.

  You can find this engine in Subversion as FiveL_3_1_1_Stabilization and
  Mac5L_202_Stable.  Release notes are in Win32/ReleaseNotes.txt and
  Mac/ReleaseNotes.

Vendor Branches in Subversion
-----------------------------

  Vendor branches & tags go into the /vendor directory in
  Subversion. Read up on vendor branches in Chapter 7 of the
  Subversion book. Currently the only one migrated over to the proper
  structure in Subversion is PLT; all other vendor branches still
  exist in the form that the CVS to Subversion migration left them.

  There should be a script somewhere (maybe online, I can't find it in
  the TortoiseSVN distribution) called svn_load_dirs.pl that does what
  needs to be done to upgrade a vendor branch to a new version. Check 
  the Subversion book for more information on how to use it.

Upgrading PLT
-------------

  Get the appropriately tagged version of PLT from the PLT Subversion
  server. You should probably do an svn export so you won't get any of
  the .svn directories. For example:

    svn export http://svn.plt-scheme.org/plt/tags/v360 plt

  Once you have that, follow the vendor branch procedure to import it
  to vendor/plt/current, tag it, and then merge that tag into
  5L/libs/plt.

  Ten libraries (listed below) from libs/plt/collects need to be
  aliased at Common/Runtime.  When updating libs/plt, be sure to 'svn
  rm' the copies at Common/Runtime and use 'svn cp' to copy the
  updated versions over.  (If you're using a client with really fancy
  branching support, you could always use a star-merge instead.)

    compiler
	config
	mzlib
	net
	planet
	setup
	srfi
	swindle
	syntax
	xml

libxml2 Hacks
-------------

I made a static version of libxml2 for Tamale by cloning the "Win32 Debug"
and "Win32 Release" targets to "Win32 Debug DLL" and "Win32 Release DLL"
respectively, then opening up the DSP file in Emacs.  After the TARGTYPE
line:

  # TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102

...I inserted a second target type:

  # TARGTYPE "Win32 (x86) Static Library" 0x0104

Then I edited the comments further down to read as follows:

  !MESSAGE "libxml2 - Win32 Debug" (based on "Win32 (x86) Static Library")
  !MESSAGE "libxml2 - Win32 Release" (based on "Win32 (x86) Static Library")

Then I re-opened the DSP file in Visual Studio and made the following
changes to each of the non-DLL targets:

  * Set the /nologo flag.
  * Set appropriate build and output directories.
  * Replaced the _USRDLL proprocessor define with _LIB.
  * Set a runtime library which matched my project.


Unix Command Line Magic for Doing CVS Merges
----------------------------------------

This section is obsolete. Check the Subversion history for what used
to be here, if you end up having a need to do this. Hopefully,
svn_load_dirs.pl should do what these snippets used to.

Upgrading wxWidgets
-------------------

Get your copies of wxWidgets from anonymous CVS, *not* the tarballs or
zipped sources.  The tarballs are missing many files which are present in
CVS (including MSVC project files), and there's no practical way to find
them all except in a CVS copy of wxWidgets.  No, the wxMSW installer won't
work either--it's missing *other* files.

Upgrading wxWidgets is officially a pain in the neck, and typically takes
several days.  Here's my working outline from the 2.5.x -> 2.6.1 upgrade.
It should give you some sort of idea about what you're getting into.

  Steps
    Get it building
      Download 2.6.1
        MUST get from anonCVS, not tarball, if we want MSVC++ project files
      Extract patches we made to 2.5
        9 local patches found
      Back out patches as necessary
      Delete added project and setup.h files we'll need to regenerate
      Check line endings of 'cvs export' and new code
        Both appear to be DOS
        Let's hope it does the right thing
      Make a list of files deleted by upstream maintainers
        The list is huge so we don't keep a copy here
      Import 2.6.1 to vendor branch
      Resolve any import conflicts
        C libs/wxWidgets/contrib/include/wx/stc/stc.h
        C libs/wxWidgets/contrib/src/stc/gen_iface.py
        C libs/wxWidgets/contrib/src/stc/stc.cpp
        C libs/wxWidgets/include/wx/evtloop.h
        C libs/wxWidgets/include/wx/image.h
          Ooops, we were merged after all!
        C libs/wxWidgets/include/wx/msw/wx.rc
        C libs/wxWidgets/src/common/image.cpp
          Ooops, we were merged after all!
        C libs/wxWidgets/src/msw/bitmap.cpp
        C libs/wxWidgets/src/msw/dc.cpp
          Ooops, we were merged after all!
        C libs/wxWidgets/src/msw/dib.cpp
        C libs/wxWidgets/src/msw/evtloop.cpp
        C libs/wxWidgets/src/msw/textctrl.cpp
        C libs/wxWidgets/src/msw/window.cpp
      Make sure that 'cvs import' deleted files deleted by upstream maintainers
      Regenerate project and setup.h files we deleted
      Build Tamale
      Reapply local patches
      Add files to CVS
      Apply wxWidgets-2.6.1-Patch01.zip bugfixes to local tree
        I put them on the vendor branch; it was pretty tricky but worked
    Look for bugs
      Full-screen mode is broken
        Just a corrupt build
      Window backgrounds get erased when they shouldn't
        Examples
          ScriptEditor
            When opening a new document, it shows up first as a small
              subwindow, then resizes
          QuickTime
            Are we displaying the QT window as a blank black rectangle
              earlier than we used to?
        Must set up all object options *before* Create() gets called
          Create now draw objects immediately!
      Stupid flickering in DocNotebook tabs when opening new window
        Reported to the bug tracker
    Document process
  Analysis details
    Analyze patches from 2.5
      Back out completely
        wxWidgets-2.5-bitmap.diff
          Alpha premul moved to dib.cpp
          Multiple small bugfixes
          ALL CHANGES MERGED IN 2.6
        wxWidgets-2.5-dib.diff
          Alpha premul happens *here* now
          ALL CHANGES MERGED IN 2.6
        wxWidgets-2.5-image-bugfix.diff
          delete -> free bugfix
          MERGED IN 2.6
      Merged by upstream, but we didn't notice them the first time around
        wxWidgets-2.5-dc.diff
          Alpha blending fixes
          NOT IN 2.6
        wxWidgets-2.5-image-convertmask.diff
          ConvertMaskToAlpha function
          NOT IN 2.6
      Leave in place during merge
        wxWidgets-2.5-textctrl.diff
          Tab-order bugfix
          NOT IN 2.6
        wxWidgets-2.5-window.diff
          Support for using PERIOD key as part of a menu accelerator?
          NOT IN 2.6
      Back out and reapply after merge
        wxWidgets-2.5-evtloop.diff
          Broke out prologoue and cleanup of main event loop so we can
            override it safely
          NOT IN 2.6
          This code needs to be rewritten, preserving only the API (the
            internals have changed)
        wxWidgets-2.5-wxrc.diff
          Workaround for MSVC++ "project always dirty" bug
          NOT IN 2.6
          Small changes to nearby code
          Is this still necessary?
        wxWidgets-2.5-stc.diff
          Bugfixes
          Improved LISP support (including some hacks of local interest only)
          NOT IN 2.6 - Messy hand merge required
          Look for local problems in LexLisp.cxx--the API has changed
          May have actually fixed string lexing bugs
    Files we added to 2.5
      Project files
        build/msw/wx_wxexpat.vcproj
        contrib/build/stc/stc.vcproj
        contrib/build/xrc/xrc.vcproj
        contrib/utils/wxrc/wxrc.vcproj
        src/wxWindows.vcproj
        src/jpeg/jpeg.vcproj
        src/png/png.vcproj
        src/regex/regex.vcproj
        src/tiff/tiff.vcproj
        src/zlib/zlib.vcproj
      Setup headers
        include/wx/setup.h
        include/wx/msw/setup.h

And while you're at it, don't forget to set wxUSE_DISPLAY to 1 if you want
screen-resizing support.
