#!/usr/bin/perl
# A specialized line-counting program for the 5L source tree.

use strict;
use warnings;


#==========================================================================
#  Configuration Options
#==========================================================================

my @categories = qw(Common Mac Win32);

my @exclude = qw(Common/freetype2
		 Common/libs
		 Common/Runtime/mzlib
		 Common/Runtime/net
		 Common/Runtime/xml
		 Common/Runtime/syntax
		 Win32/DibLib);

my @extensions = qw(.h .hpp .c .cpp .cp .ss);


#==========================================================================
#  Global Variables
#==========================================================================

my $total_lines = 0;
my $comment_lines = 0;
my $category_lines;
my $category_deprecated_lines;
my %lines_by_extension;
my %exclude_table;


#==========================================================================
#  Counting Routines
#==========================================================================

sub get_extension ($) {
    my ($filename) = @_;
    my ($extension) = ($filename =~ m{(\.[^.]+)$});
    $extension;
}

sub count_file ($) {
    my ($filename) = @_;
    local (*FILE, $_);

    open(FILE, "<$filename") or die "Can't open $filename: $!, stopping";

    my $file_lines = 0;
    while (<FILE>) {
	next unless m{[_A-Za-z0-9]};
	last if m{\$Log.*\$};
	$comment_lines++ if m{^\s*(;;|//|/\*|\*\*)};
	$file_lines++;
    }

    $total_lines += $file_lines;
    $category_lines += $file_lines;
    $category_deprecated_lines += $file_lines
	if ($filename =~ m{/old5l/});
    $lines_by_extension{get_extension($filename)} += $file_lines;

    close(FILE) or die "Can't close $filename: $!, stopping";
}

sub count_directory ($);
sub count_directory ($) {
    my ($dir) = @_;
    local (*DIR);

    # Make sure we only count directories that have been checked into CVS.
    if (!defined $exclude_table{$dir} && -d "$dir/CVS") {

	# Read the files in the directory.
	opendir(DIR, $dir) or die "Can't open directory $dir: $!, stopping";
	my @entries = sort grep { !/^\./ } readdir(DIR);
	closedir(DIR) or die "Can't close directory $dir: $!, stopping";

	# Process each directory item.
	for my $entry (@entries) {
	    next if $entry eq "CVS";
	    my $path = "$dir/$entry";
	    if (-d $path) {
		count_directory($path);
	    } elsif (-f $path &&
		     defined get_extension($path) &&
		     defined $lines_by_extension{get_extension($path)})
	    {
		count_file($path);
	    }
	}
    }
}


#==========================================================================
#  Main Program
#==========================================================================

# Print our header.
print <<"__EOD__";
5L Source Tree Statistics
-------------------------

__EOD__

# Initialize our exclusion table.
for my $exclude_dir (@exclude) {
    $exclude_table{$exclude_dir} = 1;
}

# Initialize our per-extension counts.
for my $extension (@extensions) {
    $lines_by_extension{$extension} = 0;
}

# Count the code in each category, and display the counts.
for my $category (@categories) {
    print "$category: ";
    $category_lines = 0;
    $category_deprecated_lines = 0;
    count_directory($category);
    print "$category_lines ($category_deprecated_lines of that in old 5L)\n";
}

# Display the per-extension counts.
print "\nBy extension:\n\n";
for my $extension (@extensions) {
    if ($lines_by_extension{$extension}) {
	print "$extension: $lines_by_extension{$extension}\n";
    }
}

# Print our final summary and footer.
my $percent_comment = int(100 * $comment_lines / $total_lines);
print <<"__EOD__";

Total: $total_lines lines ($percent_comment% comments)

(counting only lines with alphanumeric characters, but excluding 3rd-party
libraries and CVS \$Log\$ comments at the bottom of files)
__EOD__

exit 0;
