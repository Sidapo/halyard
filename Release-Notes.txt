When possible, please include bug numbers in the form "(bug #NNN)".

SVN - 6 June 2007 - emk

  * Upgraded to FreeType 2.3.4.

0.3.10 - 8 May 2007 - brian, emk, tryon

  * Made Tamale default to opening the program in the current directory, if
    one exists, otherwise falling back to the last opened project as
    before.
  * Allowed fonts to be organized into subdirectories, because we'll soon
    be adding a large number of GPL'd fonts.
  * Major overhaul of Fonts directory with many new fonts.  All of
    these fonts are from Debian.  See the appropriate directories for
    licensing information.
  * #3969: Fixed bug where the displayed cursor wouldn't update if a
    the mouse was over an element while its cursor was changing.
  * #3968: Fixed a bug where a cursor would initially display in the
    wrong position, because its coordinates weren't translated from
    screen to stage coordinates.
  * #3970: Fixed a bug where the engine would crash if you created a
    cursor element with the name of the currently active cursor.
  * Added FIT-TO-CHILDREN! method to %CUSTOM-ELEMENT%.

0.3.9 - 1 May 2007 - emk

  * #3961: Added RAISE-TO-TOP! method to %ELEMENT%.
  * Added CENTER-ON-PARENT! method to %ELEMENT%.

0.3.8 - 27 April 2007 - emk, brian

  * Implemented IMMEDIATELY, FINALLY and QUANTIZE for improving animation
    performance.  Also tweaked INTERPOLATE to avoid setting properties to
    their current values, so that QUANTIZE actually results in a
    performance improvement in typical cases.
  * Fixed divide-by-zero bug in AFTER.
  * Fixed bug which caused file load counts in data.tam to drift by 1.
  * Renamed START in Common/planet/planet.ss to START* to avoid
    conflict on M-. on start card.
  * Support for element-based cursors:
    - Created an abstract Cursor class to wrap cursors.
    - Modified elements to refer to cursors by name, not by keeping
      copies of the objects.
    - Modified Stage to deal with new cursor interface.
    - Added CursorElement class (a subclass of Overlay).
    - Added %CURSOR-ELEMENT% template in Scheme.
    - Made Cursor ownership protocol explicit, and stop using smart
      pointers to manage cursors.  The smart pointers were hiding quite a
      few ways to lose, and it's better to get all the tricky bits out in
      the daylight.

0.3.7 - 18 Apr 2007 - emk, brian

  * Renamed STRINGS -> PREFIX-AND-SUFFIX, PLAY -> PLAY-SPRITE and
    TRANSFORM -> SLIDE-AND-RESHAPE.
  * Turned AFTER into a macro and added some braces to the syntax.
  * Added support for highlighting and indenting functions as though
    they were syntax, using DEFINE-SYNTAX-INDENT.  This may slightly
    slow down opening files in the editor; please report any serious
    degradations in performance.
  * Improved syntax-highlighting and indentation of animations in both
    the integrated editor and in Emacs.

0.3.6 - 17 Apr 2007 - emk, brian

  * Moved drag.ss and q-and-a.ss into Runtime/5L directory.
  * Added ON PROP-CHANGE handlers for %TEXT%.
  * Ported various animation functions up from iml libs, and
    refactored as combinator library. See Runtime/5L/tamale-doc.txt
    for details on how to use the new library.
  * Added AFTER animation combinator, for performing animations in
    sequence.
  * Ported various shape manipulation functions from iml libs to
    Runtime/5L. 
  * Wrote documentation for animation, which can be found in 
    Runtime/5L/tamale-doc.txt.
  * Added ON PROP-CHANGE handlers for %RECTANGLE%.
  * Cleaned up newly-added shape-manipulation functions.  Still more
    cleanup and refactoring of animation features will be needed.
  * Modified %BASIC-BUTTON% to suppress immediate redraws on MOUSE-ENTER
    and MOUSE-LEAVE events.  This fixes a number of problems with premature
    screen updates.
  * Added ELEM-MAP and ELEM-MAP-2, which allow mapping over our built-in
    "collection" types. ELEM-MAP, in particular, is equivalent to Haskell's
    FMAP.
  * Added a Dylan-style CURRY function (not to be confused with Haskell's
    CURRY function).
  * Moved animator code to animate.ss.

0.3.5 - 21 March 2007 - emk, brian

  * #2856: Fixed the slow-loading bug which caused each reload to take
    O(MN), where M is the number of modules in the program, and N is the
    number of loads since first startup. This was caused by sloppy
    installation of our custom compiled-zo handler.
  * Updated tamale.el to handle proposed object syntax.
  * Adding support for MASK operation.
  * Added :SHOWN? flags to as much of the API as possible.
  * #3841: Added a debug-log statement when we encounter an error loading a 
    file.  The program still quits, but now you can see the actual error 
    by looking at the debug log instead of having to experiement to find it.
  * Added preliminary documentation to the %ANIMATED-GRAPHIC% template.

0.3.4 - 20 Dec 2006 - emk, brian

  * Fixed bug in STRING->XML.
  * Added ON BOUNDS handler to %element% and subclasses.
  * Added :PARENT argument to element creation helper functions.
  * #2493: Fixed MEASURE-TEXT to return a bounding box based on the line
    width calculated by the line-breaking algorithm, not by the drawing
    algorithm.  This should guarantee that MEASURE-TEXT and DRAW-TEXT
    agree about where the line breaks should go.
  * #2078: Changed ascender and descender calculation to consider more
    letters.  Also added fallback code to catch overlong ascenders and
    descenders, such as the ones which may appear on the integral sign
    (U+222B).
  * Modified Typography library to use std::vector instead of std::deque.
  * #2493: Fixed bug where we'd sometimes clip a single pixel off the
    the left-most edge of the text.  We do this by indenting all text
    by enough pixels to handle the smallest negative left bearing of any
    character in the text.  This may cause left-edge alignment problems
    under certain circumstances, but not by more than a pixel.
  * #2061: Fixed DRAW-TEXT and MEASURE-TEXT to include drop shadows when
    calculating line lengths and bounding boxes.  From now on, any drawn
    text which falls outside the bounding box returned by MEASURE-TEXT
    will automatically cause an assertion failure.
  * #3818: Added PROGRAM-RELEASE-ID function (in the updater module)
    which can be used to get the release ID of a Tamale script.
  * #3829: Moved all top-level *.png graphics used by the engine (splash
    screens, progress bars, etc.) to the Graphics/script directory.
  * Added new MOVE-RECT-RIGHT-TO, MOVE-RECT-BOTTOM-TO, and
    MOVE-RECT-LEFT-TOP-TO functions to shapes.ss.
  * #3166: Creating a movie element and pausing it immediately should now
    work.  Please report any remaining pause-related bugs.
  * #2096: We now sanity-check the names of cards, elements and other nodes.
  * #3811: %EDIT-BOX% is actually a useful class now.  It supports
    specifying the text size, detecting enter events, and retrieving the
    text typed by the user.  This should make %EDIT-BOX% an acceptable
    replacement for the old INPUT command.
  * #3834: Added OPEN-IN-BROWSER command, which opens a URL in an external
    web browser.
  * #3832: Upgraded to PLT Scheme v360.  This makes Scheme case
    sensitive, and adds preliminary backtrace support.  Backtraces are
    written to Debug.log.  See deprecated.ss for more notes on the
    upgrade.
  * #3830: Made %CUSTOM-ELEMENT% instances resizable--SHAPE is now a
    settable property.  Note that changing the shape of a custom element
    will clear the associated overlay, which isn't any problem for code
    using the new ON DRAW interface.

0.3.3 - 7 Dec 2006 - emk, tryon
 
  * #3792: Added support for QuickTime movies with a ::GetMovieBox that is
    offset from 0,0.  MacTech says that this can happen, and I'm seeing it
    in QuickTime movies with a text track, which we need for captions.
  * #3792: Added support for MEDIA-CAPTION events.  By default, we make the
    first QuickTime text track invisible, and report the captions to the
    script as they arrive using MEDIA-CAPTION events.  (It's possible to
    override this behavior, of course, and display the text track
    normally.)
  * #3810: Added support for changing the style and text of a %TEXT-BOX%,
    and fixed TEXT-BOX to have the same argument order as other
    functions. These changes make TEXT-BOX elements usable for captioning.
  * #3828: Nodes.ss now provides <CARD-GROUP>, CARD-GROUP?, <CARD-SEQUENCE>,
    CARD-SEQUENCE?.
  * #3812: Changed text formatting language from legacy punctuation system
    to regular XML.  Supported tags include: I, EM, CITE, B, STRONG,
    and the non-standard H ("highlight").

0.3.2 - 29 Nov 2006 - emk

  * #3807: Removed minimal support for "real time" (i.e., non-consing)
    state-db listeners, since we didn't actually need it in our last major
    project (which made aggressive use of the state-db), and there's no
    need to keep an extra Scheme interpreter hanging around for no good
    reason.
  * #3808: Replaced several top-level functions with ON handlers, in an
    effort to make our API more object-oriented.  See deprecated.ss for the
    full list.
  * #3809: The functions WAIT, DELETE-ELEMENT and DELETE-ELEMENTS no longer
    accept symbols in place of actual elements.  (To get the old behavior,
    call ENABLE-DEPRECATED-FEATURES! at script load time.)
  * #3810: More API cleanup in tamale.ss.  Most element templates no longer
    have "-element%" in their names (except for abstract templates near the
    top of the hierarchy), and the NAME argument for most element creation
    helpers has been made a keyword argument (finally).  ddc and brian both
    seemed to think this change was plausible; let's see how it works in
    practice.
  * #3792: Added very preliminary accessibility support.  We now expose
    all the elements on the Stage via wxAccessible (and thus MSAA),
    although we don't yet provide any useful information about them.
  * #3813: Added %BOX%, %TEXT-BOX%, %GRAPHIC% and %RECTANGLE% elements (and
    corresponding helper functions).  These should be used in place of the
    regular drawing calls to help make 508 support easier (and to help
    ease our migration to a future GUI editor).
  * #3810: More API cleanup in tamale.ss.  Renamed *-PICTURE to *-GRAPHIC,
    changed the argument order of DRAW-TEXT and DRAW-GRAPHIC, renamed
    %ZONE% to %CUSTOM-ELEMENT%, and rewrote templates to support ON
    handlers for DRAW, ERASE-BACKGROUND, and INVALIDATE (which will help us
    to support a future screen editor).

0.3.1 - 27 Nov 2006 - emk

  * #3806: The engine now uses 1-3% of the CPU while idling, and 6-20% when
    playing QuickTime, instead of 100% (at least as measured on my machine).
    This fix depends on #3783, the NAP and TIMEOUT fix.
  * #3810: Massive cleanup of Runtime directory, including reorganization
    and deprecation.  See Runtime/5L/deprecated.ss for a list of renamed
    and removed functions.

0.3.0 - 21 Nov 2006 - brian, emk

  * #3647: Fixed update installer to build parent directories for
    new files correctly.
  * #3683: Removed PNG of stage from script crash reports--it made the
    crash reports too big, and we hadn't used it much.
  * #3691: The update installer now checks if it can write to the
    destination paths before copying files, and will keep trying for
    10 seconds if it cannot write to a file, in case it is run before
    the engine has fully quit.
  * #3692: Update installer now touches each file that it installs,
    so PLT (and any other tools that care) will have appropriately 
    up-to-date timestamps on all files. 
  * #3783: Replaced NAP with a much simpler implementation, and removed
    TIMEOUT entirely (pending reimplementation).  These were not especially
    nice bits of code, because they predated much of the modern engine's
    design.
  * #3784: Replaced CALL-AT-SAFE-TIME with RUN-DEFERRED (thus affecting
    DEFERRED-CALLBACK).  Callbacks are now postponed until *after* the card
    body has run completely.  We've also fixed a bug that could cause
    deferred code to be lost if *other* deferred code called JUMP, and
    provided a way to automatically clean up deferred callbacks when
    exiting a card or a sequence.
  * #3798: Removed support for "backgrounds" from the GUI.  Since this
    support didn't actually do anything, we don't particularly need it.
  * #3798: Removed support for modal text input, which should be
    implemented using regular input elements.
  * #3786: Added support for skipping to the end of a Vorbis stream.
  * #3789: Events and deferred thunks are now visible in Debug.log, but
    the installation of ON handlers is no longer recorded.
  * #3791: If Debug.log is not created at startup, maintain an internal
    list of recent log entries.  If a crash occurs, write the entries to
    disk.  Also, other cleanup of TLogger.
  * Switched to Visual Studio 2005 for official Windows build.
  * Removed preinstaller from build, because we don't currently need it.
  * Dealt with various warnings introduced by Visual Studio 2005, at
    the Common and 5L project levels.  There's a lot more warning work
    still to go.  This particular change included updading boost's
    visualc.hpp configuration header to the latest version.  

0.2.3 - 23 Oct 2006 - emk, brian

  * #3503: The preinstaller now confirms quit requests with the user, and
    shows an "Installing..." label when running the QuickTime installer.
    This should help prevent problems during the long pause while the
    QuickTime installer launches.
  * #3503: Fixed silly bug when preinstaller showed the "confirm exit"
    window when quiting itself normally.
  * #3510: We no longer poll for the installed QuickTime version when
    our preinstaller window is in the background, to prevent the QuickTime
    installer from trying to quit our preinstaller because it "uses
    QuickTime."
  * #3168: UpdateInstaller now has do-nothing "--uninstall" option, which
    will allow us to improve our uninstall options in the future.  This
    is a "add it now or never" hook.
  * #3168: "UpdateInstaller --uninstall ." can now create the directories
    required for its log file.
  * #3581: Modified how preinstaller launches QuickTime installer, and
    added a dialog box warning QuickTime Pro users.
  * #1760, #3591: Fixed crash that occurred when drawing to DrawingArea
    objects with an area of zero.
  * #3576, #3508: Added a "fatal error without crash report" routine for
    use in fixing these two bugs (and others).
  * #1712: Once a crash has been detected, supress further display of
    wxWidgets-originated error messages, and just log them.  This prevents
    several common non-fatal error conditions in the crash reporter (no
    network, misconfigured server, etc.) from looping back into the crash
    reporter.
  * #3612: Fixed bug which caused engine redraws to occur even when the
    drawing calls had been fully clipped.  This should prevent flicker
    in a few places that use heavyweight (i.e., native GUI) elements near
    overlays.
  * #3167: Added basic support for progress bar in the updater. This
    updates once per file downloaded.
  * #3508: Add error checking to scheme file loader that will allow it to
    detect the case when a limited user tries to run the program before an
    administrator has run it, and displays a nice error message prompting
    the user about what to do.

0.2.2 - 20 Sep 2006 - emk, brian

  * #2930: Implemented a "preinstaller" which can be used as an
    autorun.exe.  The preinstaller walks the user through installing
    QuickTime, which is helpful, since the latest version of the QuickTime
    installer is both (a) asynchronous once launched and (b) legally
    unmodifiable under the standard distribution agreement.  For now, the
    "preinstaller" is hard-coded for use with our latest project, but it
    should be easy to parameterize for other projects.
  * #3467: Applied a band-aid to the crash-handling logic so that it will
    generally restore the system task bar for all but the worst crashes.
    We could benefit from more work in this area, but a more complete fix
    would destabilize the engine.
  * #3466: Send crashes to a different server by default.
  * #3461: Disable screen saver a bit more thoroughly in full-screen mode,
    even if the user has a password protected screen saver turned on.
  * The update installer now correctly detects unwritable directories.

0.2.1 - 17 Sep 2006 - emk, brian

  * #3162: MOVIE-RESUME will no longer cause a finished movie to loop.
  * #3042: Quake 2 console access now turned off by default.  To restore,
    run the command (quake2-command "bind ` toggleconsole").
  * Changes to UpdateInstaller and related code.

0.2.0 - 9 Sep 2006 - emk, brian

  * Fixed bug in UpdateInstaller.exe that prevented it from working with 
    Windows pathnames.
  * Fixed UpdateInstaller.exe to not try and replace itself as it was running.
  * Made downloader honor redirects (max of 10 redirects).
  * Replaced "volatile" with "IntuitiveVolatile" in multithreaded code,
    in an effort to prevent race conditions on a future version of the
    x86 architecture (and possibly the current version).
  * #1875, #2305, #3005: Deiconization bugs (and related crashes during
    screen resizing) fixed.  This fix, unlike the first, seems to cover
    all the edge cases I could reproduce.
  * #2958: Added a hook to detect engine-trigged shutdowns, etc., so
    programs have an opportunity to save prefs, section timing data, etc.
  * #1875: Partial fixes for background "cursor theft".  These seem to
    work very well in full-screen mode, but still have issues in developer
    mode, thanks to some interesting behavior with
    wxTopLevelWindow::IsActive and wxWindow::SetFocus.
  * Removed "Control-Q" accelerator for quiting, because it wasn't a
    standard Windows accelerator, and because (like the still-remaining
    Alt-F4) it didn't go through EXIT-SCRIPT.
  * Added some comments with more information about recent bugs.

0.0.63 - 2 Aug 2006 - emk, brian

  * #2894: Made it possible to slide along walls in Quake 2 at a
    lower-than-normal walking speed.  This makes invisible guidewalls much
    more effective when moving at a "realistic" pace.  There seems to
    be a slight asymmetry in wall friction, which worries me slightly,
    but this is a minimally invasive fix for the problem.
  * More updater changes from Brian.
  * Updated copyright messages for 2006 release.
  * Added Rakefile to clean, build and test the engine.  This is the first
    of many steps towards improving our project automation.
  * Centralized version-number handling in TVersion.h.

0.0.62 - 26 July 2006 - emk, brian

Internal release for UpdateInstaller testing.

  * Added placeholder code for launching the UpdateInstaller.
  * Added watchdir/unwatchdir to Quake 2 to support detecting when the
    user looks in a specified direction (#2893).
  * Suppress splash-screen on reload so scripters can visually see the
    change from the old version of a card to the new one (#2921).

0.0.61 - 30 Jun 2006 - emk, brian

  * Created Downloader class, for downloading a file specified by a
    URL to the local disk.
  * Changed error handling of wxWidgets errors to make better use of 
    the TLogger class and not use the default error handlers. 
  * Moved DoIdle from TSchemeInterpreter to TInterpreter.
  * Fixed up code so we can compile under Visual Studio .NET 2005, and
    updated HACKING.txt to include instructions for how to set up
    VS.NET 2005.
  * Modified CARD-PREV to find the previous *card*, not just the previous
    *sequence*, in order to make "back" buttons in do the right thing
    in nested sequences (bug #2315).
  * Added HIDE-CURSOR-UNTIL-MOUSE-MOVED! function (#2467).
  * Preliminary splash-screen progress bar support (#2856).

0.0.60 - 20 Oct 2005 - emk

  * Turned off wxCLIP_CHILDREN to allow our QuickTime playback code
    to work the way it did before wxWidgets 2.6.0 (bug #2014).
  * Log files are now stored in
    C:\Documents and Settings\<User>\Application Data\Tamale (bug #1847).
  * User data files are stored in subdirectories of the log directory
    (bug #1847).
  * Fonts/cache.dat is now Application Data\Tamale\<Script>\fntcache.dat
    (bug #1847).
  * Screen-saver is disabled when in full-screen mode or playing video
    (bug #2175).

0.0.59 - 18 Oct 2005 - emk

  * Merged more-robust QuickTime networking support from the 3.4 branch.
  * Fixed rare crashing bug in Widget (bug #2230, #1714).
  * Fixed crashes in EXIT-SCRIPT.
  * Hooked up basic error-handling for QuickTime network problems (bug #1714).
  * Added %MOVIE-ELEMENT% handlers for USER-EXIT-REQUEST,
    MEDIA-NETWORK-TIMEOUT, MEDIA-NETWORK-ERROR, MEDIA-LOCAL-ERROR,
    SET-TIMEOUT! and END-PLAYBACK.
  * Added NATIVE-DIALOG function.

0.0.58 - 24 Aug 2005 - emk

  * Fixed crashes when overlays were partially obscured by the edge
    of the viewport in Quake 2 (bug #2099).
  * Added HTML entity &lambda; (just for fun).

0.0.57 - 23 Aug 2005 - emk

  * Added support for many new named entities, including &alpha;, &beta;,
    and &gamma; (for discussing radiation).
  * Added support for numeric entities (e.g., &#8225; for double-dagger).
  * Removed lots of legacy code for non-Unicode encodings.

0.0.56 - 18 Aug 2005 - emk

  * Don't show "Tamale" in application name when in runtime mode (bug #1728).
  * Display script icons when in runtime mode (bug #1728).
  * Added POINT-IN-SHAPE? (bug #2086).
  * Added support for floating zones in a separate layer when dragging
    them (bug #2085).

0.0.55 - 27 July 2005 - emk

  * Added NOPUSH flag for FUNC_DOOR objects in Quake.  This flag should
    make doors "polite"--they won't push you, they won't damage you,
    and they'll snap open instantly if they hit you.  And if the doors
    snap open, they won't mess up the trigger's toggle state (bug #1769).
  * We now send MEDIA-FINISHED events for Vorbis audio streams (bug #2052).

0.0.54 - 26 July 2005 - emk

  * Added FREEZE command which can be called from the Quake 2 console to
    freeze/unfreeze the player in place instantly.  Without arguments,
    FREEZE toggles the current state, but you can also pass in an explicit
    ON or OFF argument.  For odd technical reasons, you can't crouch while
    frozen.  This feature requires a new engine as well as a new
    gamex86.dll for best results (bug #1817, partial).
  * Added FREEZES and REGION_NAME fields to FUNC_WALL objects in Quake 2.
    When the player hits a wall with a FREEZES field, the player is
    immediately frozen as though they had issued a "FREEZE ON" command.
    When the player hits a wall with a REGION_NAME field, the state-db key
    /quake2/hit-wall?/wallname is set to #t (bug #1817, partial).    
  * Added explicit "ON" and "OFF" arguments to the "GOD" and "NOTARGET"
    commands in Quake 2.  As with the new FREEZE command, the optional
    arguments will also surpress console output (bug #1769, partial).

0.0.53 - 22 July 2005 - brian, emk

  * Fixed the occasionally broken indentation and highlighting of
    special forms (bug #2033).
  * Crash reporter bugfixes (bug #2032):
    - The crash reporter no longer fails if it the stack contains
      a corrupt wxString instance.  This is a patch pulled from
      upstream wxWidgets CVS and applied by hand.
    - If the crash reporter itself crashes, we attempt to just pop
      up a simple error dialog and exit.
    - We now catch wxWidget assertion failures and feed them to
      the crash reporter.
  * If the Stage loses its mouse grab unexpectedly, it now attempts
    to do something reasonable (bug #2032).
  * Nightly build scripts have been fixed.
  * Added support for automatically generated make-classname
    functions, class predicates, slot getters and setters to tags.ss
    (bug #1972).
  * Added support for defining new syntax taggers to tags.ss (bug
    #1972).
  * We no longer override OnAssert in the Release build (where it
    doesn't exist, anyway).
  * Added a IML_Q2_TOTAL_CONVERSION preprocessor macro which can be
    used to remove Quake 2's dependence on certain files.  This only
    includes files which can't be easily replaced by dummy files (bug #1688).

0.0.52 - 14 July 2005 - emk

  * Made HEARTBEAT a non-logging primitive.
  * Reset wxUSE_DISPLAY to 1 to re-enable full-screen mode after upgrade.
  * Major crash reporter enhancements (bug #1712, partial).
    - Crash reports for scripts go to a separate web site.
    - Reports include script name and version.
    - Reports include the current and previous card names.
    - Reports include a build timestamp and crash timestamp.
    - Script crash reports include a screenshot!
    - Reports include processor information.
    - REGISTER-DEBUG-REPORT-FILE! can be used to include extra files
      in the crash report, as requested by scripters.
  * Bumped data.tam file version and implemented simple format migration.
  * Added wxHyperLink class from wxcode.sf.net for future use.
  * Made wxHyperLink::ExecuteLink public.
  * Updated installer for new crash reporter.
  * Made some fixes to nightly build script.
  * Documented wxWidgets upgrade procedure.

0.0.51 - 13 July 2005 - emk

  * Replaced CrashRpt with wxDebugReport.  Not all features are
    implemented yet; this is a work in progress (bug #1712, partial).
  * Added code to submit debug reports to the server (bug #1712, partial).
  * Fixed bug which caused wxDebugReport to generate invalid XML.

0.0.50 - 12 July 2005 - emk, brian

  * Fixed bug in which compiled .zo files weren't being recompiled. 
  * Added runtime support for moving all %zone% elements. When
    creating a zone, AT will be set to the origin of the shape, and
    SHAPE will be moved to have a (0,0) origin, so that when you
    offset SHAPE by AT you get the actual shape on the screen.
  * Added &deg; character (bug #2000).
  * Upgraded our included wxWidgets to 2.6.1, and modified some engine
    code to use new wxWidgets APIs (bug #1712, partial).  We also
    reapplied the following patches which had been backed out before
    the upgrade:
      - wx.rc: Build dependency hack.
      - stc: Lots of local LISP-mode tweaking.
      - evtloop: Hacked in *another* set of event loop hooks.
  * Fixed bugs introduced by LexLisp.cpp merge (bug #2004, bug #2005).
  * Fixed QuickTime black-rectangle bug introduced by wx 2.6.1 (bug #2007),
    and cleaned up other problems caused by calling wxWindow::Create()
    automatically before setting up object options.
  * Fixed custom build step broken by wx 2.6.1.

0.0.49 - 8 July 2005 - emk, brian

  * Added MoveTo and Origin to TPolygon, and allowed Zone elements to
    be moved. Runtime support for this will be added later. 
  * Fixed exception-handling bug in TSchemeInterpreter::Call5LPrim
    which corrupted C++ exception-handling state.  We *think* this
    should cure several of our most annoying hard-to-reproduce bugs
    (bug #1691, bug #1762, believed fixed).
  * Fixed test-suite failure introduced by HEARTBEAT function.
  * Fixed buggy call to Sys_Error in qoverlay.cpp (bug #1989, partial)
    and increased the maximum number of overlays (bug #1897).
  * Fixed "Not Responding" timeout during initial startup on slow machines
    by calling ::PeekMessage before and after every *.zo compilation
    (bug #1898).
  * Give reasonable errors for missing Vorbis files (bug #1993).

0.0.48 - 5 July 2005 - emk, brian
    
  * Added COPY-STRING-TO-CLIPBOARD function for use by developer tool
    libraries.
  * Fixed bug in AudioStream::StreamsAreRunning().
  * Converted AudioStream to use a background thread instead of a 
    timer (bug #1716, partial).
  * AudioStream now does initial Idle() in backround, which should
    make it possible to start audio without clobbering 3D performance.
    Some clean-up still required (bug #1716, partial).
  * AudioStream threading code cleanup finished (bug #1716).  The
    BACKGROUND_START_AFTER_PRELOAD code is still in place, but turned off.
    If testing doesn't reveal any stuttering at the start of audio
    playback, we'll delete it and simplify the audio classes considerably.
  * Fixed bug where PortAudio would sometimes fail to shut down a stream
    properly.
  * Added logging code to report screen aspect ratios and suspected
    "merged" monitors (bug #1934, partial).
  * Fixed the bug which caused italic text to be cut off at the end of
    a line (bug #1955).
  * Fixed About box to use correct #define to get versions.
  * Fixed missing icon bugs for Listener and other windows.
  * Hacked ScriptEditorDB to attempt to clean up duplicate file
    entries with different case, i.e., "R1.ss" and "r1.ss".  This
    code is a bit kludgy because it tries to avoid expensive and
    complicated file I/O.
  * Added :VOLUME parameter to all media elements.
  * Fixed QuickTime SET-MEDIA-VOLUME! and :VOLUME support to
    actually work.  (The original code was simply broken.)

0.0.47 - 21 June 2005 - emk

  * Added STYLESHEET function to create new stylesheets on the fly.
  * Moved many RECT and POINT functions into types.ss.
  * Added <LAYOUT> class to lay out boxes on a screen.
  * Other minor Runtime tweaks.
  * Added script/definition tree to left of ScriptEditor.
  * Added icons for new script/definition tree.
  * Clicking on folders jumps to definition.
  * Refactored layout-saving code from StageFrame to SashFrame.

0.0.46 - 4 Feb 2005 - tryon, emk, naomi

Major editor improvements:

  * You can use Alt-. to jump to the script for the currently running
    card, and to look up the definition of functions in the editor.
  * The editor now displays call tips after you type a function name.
  * Fixed a crash when the user hit Control-E on the loading screen.
  * Added a simple ScriptEditorDB class to support Meta-dot lookups
    of definitions.
  * Heavily overhauled ScriptEditorDB to use transactions more extensively,
    run faster, and provide better APIs to the ScriptEditor.
  * Fixed SQLite3 to automatically destroy reader objects.

Other changes:

  * Added Quake 2 variable 'cl_disablemenu' which allows the Quake 2
    menu system to be disabled and replaced with a custom "escape"
    binding (bug #1740).

0.0.45 - 15 Dec 2004 - emk

  * Updated LICENSE.txt file to include latest information (bug #1724).
  * Added support for Alt-Tab out of full-screen mode (bug #1726).
  * Added code to hide and show the taskbar (bug #1726).
  * Added the function MARK-UNPROCESSED-EVENTS-AS-STALE! for manually
    marking all queued events as stale.  This is helpful if the user
    is repeated clicking on something or pressing a key waiting for
    a slow task to happen.  This function doesn't need to be called
    from event handlers, which always mark all unprocessed events
    as stale (bug #1731).
  * Check to make sure the engine has the primitive WakeUpIfNecessary
    before calling it.  (This is what I get for not running the full
    test suites.)
  * Make sure to focus the correct button on screen-adjustment dialogs
    to prevent Windows from changing the default.  This is dumb;
    wxWidgets should do this for me.
  * The engine now gives a useful error message if exceptions occur
    in FiveLApp::MainLoop.  This fixes the mystery exception Robinson
    was seeing when the engine was launched with a bogus startup
    directory (bug #1853).

0.0.44 - 13 Dec 2004 - emk

  * Added splash screen with graphic and copyright notice (bug #1725).
  * The screen-resizing code is now polite--it asks first, confirms
    afterwards, and stores prefs based on system screen geometry.
    You can override it by holding down "shift" when Tamale switches
    into full-screen mode (bug #1280).

0.0.43 - 13 Dec 2004 - emk

  * Added QUICKTIME-COMPONENT-VERSION primitive.
  * Removed the kInitializeQTMLUseGDIFlag from QuickTime startup. This
    will once again allow us to use hardware acceleration, with possible
    negative consequences. Keep an eye out for QuickTime bugs on weird
    machines for the next month or two.
  * Made sure we call scheme_set_stack_base with a second argument of 1 to
    prevent the Boehm GC from scanning video card memory mapped into our
    address space by QuickTime (which is hideously slow).  We've been
    neglecting this fix for a while because we've been using
    kInitializeQTMLUseGDIFlag, which keeps QuickTime from mapping video
    memory.
  * We now detect if QuickTime isn't installed and give an appropriate
    error (bug #1846).
  * We handle top-level exceptions much more gracefully and informatively
    than before (bug #1846).
  * We no longer register elements with the stage before they're fully
    created. This fixes the bug where throwing an exception in an element
    constructor would crash the engine (bug #1836).
  * The engine now preforms delayed wake-ups of the interpreter (after the
    end of a WAIT) more robustly, which should fix some ugly assertion
    failures (bug #1845). I'm convinced this portion of the code will need
    a redesign, and have added some comments to that effect.
  * The engine no longer crashes if you press control-space in a
    simulation (bug #1838).  When the engine goes into edit mode, it
    now deletes all elements and any StateDB listeners registered by the
    script.
  * The error dialog no longer floats over all other windows (bug #1829).
  * Basic runtime mode implemented.  This supports launching directly to
    full-screen mode with a specified script, and disabling editing options
    if 5L.prefs is missing (bug #1726).  As noted in the bug, a number of
    other issues remain, and we'll have to deal with them before declaring
    the runtime mode perfect.
  * Added code to update menu accelerators more reliably while in runtime
    mode (bug #1726).  This may cause performance problems.
  * All script errors are fatal in runtime mode (bug #1730).

0.0.42 - 06 Dec 2004 - emk

  * EVENT-STALE? no longer gets confused if your system has been
    up for more than 49.7/2 days (bug #1779).

0.0.41 - 06 Dec 2004 - emk

  * Added version to "About..." dialog (bug #1785).
  * Fixed Quake 2 to stop playing CD audio and blocking CD mounts (bug
    #1676).
  * Added EVENT-STALE? to detect old mouse and key events (bug #1779).

0.0.40 - 08 Nov 2005 - emk

  * Added ANIMATE function.
  * Modified Tamale to use standard open file dialogs (bug #1713).
  * Upgraded FreeType from 2.1.4rc1 to 2.1.9.  Text may look different--
    supposedly better.  This will allow us to start fixing low-level
    FreeType bugs.
  * Fixed calculation of nominal point sizes to be compatible with
    new FreeType version, which appears to be better documented in
    this respect.
  * Added code to make sure we position the StageFrame on the actual
    display (part of bug #1272).
  * The engine no longer crashes if errors or jumps occur in (ON EXIT ...)
    handlers--instead, we report the error and continue with the original
    jump (bug #1761).

0.0.39 - 21 Sep 2004 - emk

  * Quake 2 no longer places the cursor outside the window when running
    on the left-hand monitor of a two-monitor system.  However, under
    certain complicated circumstances (that shouldn't come up for users
    running in full screen mode) it is now possible to make the Quake 2
    player spin continuously (bug #1739, mostly fixed).
  * Fixed assertion failure during transitions where the dirty rectangle
    didn't fit on the screen (bug #1753).  This was a dumb error.

0.0.38 - 20 Sep 2004 - emk

  * Fixed bug: Engine no longer tries to wake up interpreter if interpreter
    doesn't exist.
  * Fixed bug #1271: Calling %kernel-pause from a callback no longer
    crashes the engine.
  * Fixed bug #1729: We give appropriate errors if the user calls illegal
    functions from inside a callback (instead of sometimes crashing).  The
    prohibited list is WAIT, NAP, TIMEOUT and the modal text input stuff.
  * Fixed bug #1746: Screen resizing code turned back on.
  * Miscellaneous cleanup in typography code.  I was trying to track down a
    bug--which turns out to probably be in FreeType--but this reworked code
    is clearer and better.  The actual bug fix will wait until we upgrade
    FreeType.

0.0.37 - 19 Sep 2004 - emk

  * Warning fixes.
  * Fixed bug #1687: Suspending and restoring Tamale in the inventory
    screen no longer causes Quake 2 to lock the cursor.
  * Fixed bug #1695: WAIT now works for Vorbis audio.  This is still
    slightly experimental, but please start playing around.  Remember, we
    can't stream Vorbis yet.
  * Fixed bug #1706: Scheme ASSERT is no longer fatal, which means it can
    be used to report user errors.  %ASSERT can still be used to report
    kernel errors, and will mail a bug report.  This makes a number of
    engine-crashing bugs non-fatal script bugs.
  * Fixed bug #1738: In full screen mode, the engine automatically hides
    the cursor when there's nothing to click on.  This is still slightly
    experimental.  Some basic caveats:
      - QuickTime movies force the cursor to be shown only if they have a
        controller bar or they're interactive.
      - Other native widgets always force the cursor to be shown, including
        browsers, text boxes and ActiveX controls.
      - By default, zones and overlays only force the cursor to be shown if
        they have MOUSE-UP, MOUSE-DOWN, MOUSE-ENTER, MOUSE-LEAVE or
        MOUSE-MOVED handlers.  You can override this manually using the
        WANTS-CURSOR? property.
      - Cards with MOUSE-* handlers, but no zones, will not currently
        display a cursor.  This is half design decision and half bug; we'll
        wait for some experience before deciding one way or another.
      - The cursor doesn't always seem to update until you move the mouse.
        In particular, hidden cursors may not immediately become visible.
        So far, it *seems* that this is a Windows issue, but there's a
        chance Stage::OnIdle is doing something wrong.
      - "Show borders" uses red borders for elements which want a cursor,
        and grey borders for elements which don't care.
      - Zones which don't have WANTS-CURSOR? set will no longer participate
        in any mouse activities--they're effectively invisible to the
        mouse-handling code.
  * Fixed bug #1748: Crossfades can now be run during QuickTime movies.
    This required fixing the crossfader to only touch dirty portions of the
    screen, and to call wxApp::ProcessIdle between each frame so QuickTime
    doesn't starve for lack of CPU.  Unfortunately, fade durations are
    probably even less accurate by now, and won't get better unless I use
    high-resolution multimedia timers.

0.0.36 - 13 Sep 2004 - emk

  * Closing last tab when there are two or more tabs no longer
    causes an assertion failure.  The low-design still has issues,
    though, which we will need to address in a future refactoring.
  * Fixed bug #1690: We now completely clean up from (WAIT ...)
    when changing cards.
  * Fixed bug #1696: When notifying state-db listeners of changes,
    we watch out for listeners which delete other listeners.
  * Fixed bug #1697: Clicking on the stage without a script loaded
    no longer causes an assertion failure.
  * Fixed bug #1698: When "Reload Script" can't find the card
    it wants to jump to, it will jump to 'start' instead.
  * Fixed bug #1700: We now detect attempts to create nodes named
    '#f', and we check for duplicate node names earlier in the
    creation process, better preserving nodes.ss invariants.
  * Merged in lots of stuff from my laptop:
    - Preliminary sqlite3 integration for future use with editor.
    - More bsptools work.  This still doesn't run, but it provides
      pretty good documentation of how bsp files work.
    - Support for drawing lines in 3D while running Quake 2. This
      will be needed to debug AI, if we ever do AI.
    - Other minor tweaks and fixes.
    - A few preliminary warning fixes.  Much more to do.
  * Began work on smtpxx library.

0.0.35 - 09 Sep 2004 - emk

  * Began integration with CrashRpt library for crash reporting.

0.0.34 - 07 Sep 2004 - emk

  * More refactoring of DocNotebook in preparation for window splitting.
  * Added qtcheck project.  This is a DLL for use with InnoSetup; it
    allows installers to access the current QuickTime version, and the
    version of any QuickTime components.
  * The runtime now checks for different media locations automatically.
  * Added debug-var.ss for debugging local variables.
  * Fixed assertion failure in script editor.
  * Fixed debug build of qtcheck.
  * Added support for changing the font size in the script editor.
  * Added a :CLICKABLE-WHERE-TRANSPARENT? parameter to overlays, which
    makes them accept mouse-clicks even in completely transparent areas.

0.0.33 - 27 Aug 2004 - emk, madhura

This engine has not been extensively tested; it's just a quick build to
try out some ActiveX stuff.  See the test script for example code.

  * Quake 2 path-walking enhancements.
  * Support for embedding ActiveX controls.
  * Began refactoring of DocNotebook in editor, in preparation for window
    splitting support.

0.0.32 - 4 Aug 2004 - emk

  * Correct indentation of most special forms.
  * Support for [] braces in script editor.
  * Much smarter brace balancing code than is built into Scintilla.
  * Much more extensive syntax highlighting, including comments,
    characters, and many different types of identifiers.
  * Syntax highlighting automatically updates after Reload Scripts.
  * Bug fixes in file clobber detection code.
  * New Reload Scripts architecture--objects get notified automatically.
  * Support for viewing line numbers in script editor.

0.0.31 - 2 Aug 2004 - emk

  * Fixed alpha-compositing bug (which affected lots of text).
  * Fixed mShouldWakeUpOnIdle assertion failure.
  * Disabled ReloadScripts when it was only going to crash anyway.

Script editor improvements:

  * Close & Close All menu items
  * Wrap lines.
  * Show whitespace.
  * Save All
  * Offer to reload files which changed on disk
  * Check for changed files before changing and prompt

0.0.30 - 30 July 2004 - emk

We have a new wxWidgets version:

  * Updated Tamale for latest CVS version of wxWidgets.
  * Worked around radio-button defaut selection bug.
  * Fixed assertion failure caused by latest wxWidgets.

...and a new text editor:

  * Added an editor widget based on wxStyledTextCtrl (i.e. Scintilla).
  * Started using FiveL namespace on Windows.
  * Added support for Scheme-style indentation.
  * Implemented a tabbed-document control.
  * Simple File, Edit and Search menus work.
  * Saving, opening and reloading work faily well.

...and some other stuff:

  * Small bug-fix to alpha-channel box outline code--stop drawing
    over the same area twice.

0.0.29 - 02 June 2004 - emk, brian

  * Moved most of overlay support into quake2/client, except for
    actual drawing/conversion code.
  * Added a broken stub implementation of GL overlays.  This might
    actually work on some hardware, but seems to have driver issues
    on my laptop.
  * Added alpha channel support for horizontal lines, vertical lines
    and outlined boxes.  These should also now be drawn in identical
    locations regardless of graphics card and OS version.
  * Added clear-prefs!, clear-user-prefs!, and clear-global-prefs!, to
    support automatically clearing an entire preference file.

0.0.28 - 21 May 2004 - emk

Re-enabled OpenGL drivers and implemented reticle support.  (Overlays do
not work yet.)  You now need the wxref_soft.dll and wxref_gl.dll files to
run Quake 2.

To turn on GL, run "(set! (quake2-driver) 'gl)" before initializing Quake 2
for the first time.  There are ways to switch video mode on the fly, but
they're not entirely reliable.

  * Added a Vid_GetWindowPtr function to refimport_t for passing HWNDs
    and other data types through to the graphics driver.
  * Disabled second initialization of graphics drivers when running
    under wxWindows.
  * Added code to save r_projection_matrix during scene setup.
  * Implemented R_ProjectPoint duplicating GL vertex transform logic in
    software.
  * Modified ref_soft to get HWND from Vid_GetWindowPtr.
  * Modified Quake to prepend "wx" to DLL names when under wxWindows.
  * Added support for passing through driver name during Quake 2 init.

0.0.27 - 23 April 2004 - emk

New compiler.  Test this engine thoroughly, and do not use it to update any
of our programs until at least Wednesday of next week.

  * Updated to Visual Studio .NET to get access to the
    more-standards-compliant C++ compiler.  I'm tired of working around
    MSVC++ 6 bugs.

  * Worked around a fascinating compiler bug: No toolbar icons appeared
    when running Tamale because of breakage in wxDynamicCast.  It turns out
    that the wxClassInfo for wxBMPResourceHandler didn't include a correct
    m_baseInfo1 pointer.  This pointer was incorrect because
    wxBitmapHandler never got processed by wxClassInfo::InitializeClasses.
    *This*, in turn, occurred because the sm_first/m_next chain was broken
    at wxObject::sm_classwxObject.  *This* happened because the optimizer
    for the sm_classwxObject constructor could see the declaration
    'wxClassInfo* wxClassInfo::sm_first = NULL;' and optimized away the
    initialization 'm_next(sm_first)' because it assumed sm_first would
    still be NULL when the constructor was called (and because
    uninitialized fields default to NULL).  Solution: Turn off optimization
    for object.cpp in wxWindows.

    This is why you need to be able to read assembly.

0.0.25 - 23 April 2004 - emk

  * Updated boost C++ library to version 1.31.0.
  * Updated all copyright blocks for an open source release.
  * Removed the remaining half-dozen CVS log comments, except for the
    one in TVersion.h.
  * Manually reformatted a few comments to the doxygen comment style.
  * Automatically reformatted zillions of standard-format comments to
    the doxygen style.
  * Added at least one sentence of documentation for all public classes in
    the main program, no matter how simple or obscure.

0.0.24 - 10 March 2004 - emk

  * Added STATE-DB-DEBUG function.
  * Added "trigger_region" entity to Quake 2.
  * Added support for ending WAITs from a callback.  Experimental.
  * More state-db support functions.
  * SYMCAT works like CAT, but returns symbols.

0.0.23 - 4 March 2004 - emk

  * Added (ON MEDIA-FINISHED (EVENT) ...) handler.
  * Added support for setting volume of QuickTime movies.
  * Added support for setting volume of GeigerSynthElement.
  * Moved EventDispatcher support into Element.
  * Fixed bug which caused engine to crash if you quit it while Quake 2
    was displayed.
  * Attemped to prevent wxWindows from erasing the wxWindow in which
    we're displaying QuickTime movies.
  * Added a few 'using boost::foo' directives.

0.0.22 - 1 March 2004 - emk

  * Made sure all Quake 2-related state db entries got cleared at Quake 2
    startup.
  * Implemented look_target, r_text, r_target, and r_activated_target.
  * Implemented basic reticle drawing.
  * Renamed r_activated_target -> r_look_target.

0.0.21 - 27 February 2004 - emk

  * Added support for using FOREACH to iterate over hash tables.
  * Allowed defaulted template parameters to be passed to parent template.
  * Added error message for unexpected template parameters.
  * Added error message for accessing template parameters which were never
    defined.
  * Allow templates to override parameter defaults in parent templates.
  * %ZONE% now takes an optional :AT parameter.  If this parameter is
    specified, then :SHAPE must be a rectangle at 0,0.
  * Moving zones in now much easier.  Drag and drop code will have to
    be changed.
  * %animated-graphic% now treats ../x and ../y as being relative to
    the overlay's official location.
  * %animated-graphic% now takes a symbol as a state-db path.
  * An element's position is now relative to the element's parent.
  * Elements move when their parents move.
  * POINT, RECT, etc., now print in a readable representation.
  * Added QUAKE2-RUNNING? function.
  * %geiger-synth% now relies on the state-db to determine how many
    counts per second to play.

0.0.20 - 23 February 2004 - emk, djin

  * Added support for MATCH-LET.
  * Wrote a REAL->STRING function which can format floating point numbers
    reasonably well.
  * Added 5L-Prim PolygonContains that uses the TPolygon contains method.
  * Fixed ugly redraw flicker when updating overlays above Quake 2. 

0.0.19 - 19 February 2004 - kwasi, djin, emk

  * Added code to detect infinite cycles in TStateDB changes.
  * Added tamale-tags.sh script for Emacs users.
  * Added new Quake 2 console trigger command to activate targets.
  * Provide a whole new API for state db listeners: STATE-DB-FN,
    STATE-DB-FN/RT, REGISTER-STATE-DB-LISTENER!,
    DEFINE-STATE-DB-LISTENER, and DEFINE-STATE-DB-LISTENER/RT.
  * Fixed a bug (I hope) which caused Quake commands to have extra
    text appended to the end of the command string.
  * Implemented core of realtime Scheme interpreter.  This isn't very
    fast, but it never generates Scheme garbage.
  * Removed old STATE-DB-CHANGED event-handling code.  Use the new
    listener system instead; it's happy.
  * Wrote serialization code for binmsg protocol.
  * Wrote deserialization code for binmsg protocol.
  * Implemented binmsg support in stock gamex86.dll, client, wxquake2
    and Tamale.
  * Added countdown template in scheme

0.0.18 - 15 February 2004 - emk

Added support for attaching elements to any node, not just cards.  This
includes groups, sequences, and other elements.  When dynamically creating
an element, there are two ways to specify what parent it should have.
First, you can use the :PARENT argument to CREATE:

  (create %my-elem% :parent self :silly 'foo)

Second, you can use the WITH-DEFAULT-ELEMENT-PARENT special form:

  (with-default-element-parent self
    (create %my-elem% :silly 'foo))

WITH-DEFAULT-ELEMENT-PARENT is dynamically scoped, which means that it
affects calls to CREATE within any subroutine called during its duration.

If you use neither :PARENT nor WITH-DEFAULT-ELEMENT-PARENT, then the engine
will attach nodes to the current card.  (There is no current card when
initializing groups and sequences.)  You can call DEFAULT-ELEMENT-PARENT
to get the default parent used by CREATE.  The functions ELEMENT-EXISTS?
and DELETE-ELEMENT-IF-EXISTS now operate on the default element parent
unless told otherwise.

  * Allowed elements to be attached to any node, not just cards.
  * Added WITH-DEFAULT-ELEMENT-PARENT, DEFAULT-ELEMENT-PARENT, and
    :PARENT argument to CREATE.
  * Removed the need for :TEMPLATE to be used when declaring nodes or
    other templates.
  * Added CURRENT-GROUP-MEMBER function, which (for want of a better name)
    reports the card, sequence or group which is currently the topmost
    active element in the event handling stack.
  * CURRENT-CARD will now raise an error if no card is active.
  * We now check for attempts to attach handlers or elements to inactive
    nodes.
  * You can access the elements on a node with NODE-ELEMENTS.
  * @* now takes a :IF-NOT-FOUND argument.  By default, this argument
    raises an error if no matching node is found.
  * Major overhaul of entering and exiting nodes.
  * The engine no longer relies on TInterpreterManager to get the name
    of the current card.  Instead, it gets the card name through
    a parameter to NotifyEnterCard.
  * A recent bug which caused the engine to exit unnecessarily due to
    load time errors should now be fixed.
  * Updated tamale.ss.

0.0.17 - ??? - kwasi, djin, emk

  * Added APIs for accessing TStateDB from Scheme.
  * Implemented %animated-graphic% with corresponding AnimatedOverlay class.
  * Added support for (ON EXIT () ...) handlers.
  * Updated Quake 2 game interface.

0.0.16 - ??? - kwasi, djin, emk

TValue:
  * Cleaned up a whole bunch of legacy code that can be much simpler now
    that we have TValue.
  * Removed TObject, TArray and TBTree because they have overstayed their
    welcome by about a decade.
  * Cleaned up settyped. 
  * Added output operator for TValue containing TNull().
  * Added input operator for extracting from a TArgumentList into
    a TValue. 
  * Fixed TRect argument order (finally!).
  * Deleted TString and TURL.
  * Added TStateDB class.
  * Added preliminary support for running Quake 2 in the background.
  * Added support for showing and hiding elements in both Tamale and Quake 2.
  * Deleted tons of old code which wasn't doing anything any more.

Quake 2:
  * Mouse events can now be passed from Quake 2 to Tamale overlays.
    Use +minteract in Quake to release the mouse and manipulate overlays.

0.0.15 - 30 Jan 2004 - emk, kwasi, djin

Two major new features: Tamale overlays can now float over Quake 2
(graphically, at least--input hasn't been implemented), and the Scheme/C++
value-passing interface has been extensively revamped.  Expect a few
glitches.

TValue work (kwasi, djin, emk):

  * Implemented TValue class, with full test cases.
  * Added a TCallbackPtr typedef (using a shared pointer) and an
    output operator.
  * Added TestCase.h to CommonHeaders.h.
  * Added macros REGISTER_TEST_CASE_FILE and REFERENCE_TEST_CASE_FILE
    to TestCase.h and used them in TestAll.cpp.
  * Documented TValue and moved as much code as possible into TValue.cpp.
  * Reorganized TSchemeInterpreter and began work on conversion functions.
  * TValueToScheme can now convert almost all TValue types.
  * Patched swindle's EQUALS? function to compare lists recursively with
    EQUALS? instead of EQUAL?.
  * Added a CheckFuncHelper to TestCase.h for programmers who need to
    define custom versions of CHECK_EQ, etc.
  * Exported %kernel-equals from the kernel so C++ can test for equality
    of two Scheme values.
  * Added TInterpreter::MakeSchemePolygon and MakeSchemePercent.
  * Deleted TCallbackArgumentList and TSchemeCallbackArgumentList, and
    replaced them with much simpler TValueList code.
  * Re-arranged headers a bit, and added new files to CommonHeaders.h.
  * Removed all redundant includes of TValue.h and GraphicsTools.h.
  * Finished SchemeToTValue conversions.
  * Replaced TCallback* with TCallbackPtr (a smart pointer) everywhere.
  * TArgumentList no longer needs language-specific subclasses--it uses
    TValueList.
  * TValue can now do a few limited sorts of numeric type conversions.
  * Lots of little bug fixes and stress testing related to TValue.
  * Removed SET primitive.
  * Replaced TVariable/TVariableManager with TValue/new-TVariableManager.
  * Implemented operator<< for many basic types used by TValue.
  * Removed FindVariable and Assign.
  * Made TVariableManager::Get throw errors when trying to read a
    non-existant variable.

Quake 2 Overlays (emk):

  * Added a qoverlay.h interface for displaying 32-bit overlays above
    Quake 2.
  * Added overlay-related functions to the Quake 2 renderer interface.
  * Implemented 5-bit-per-channel inverse CLUT, which maps 24-bit
    colors onto the selected Quake 2 palette.
  * Implemented basic Q2_FORMAT_BGR support in the software renderer.
  * Implemented basic Q2_FORMAT_BGRA_PREMUL support in the software
    renderer.
  * Integrated Quake 2 overlays into Overlay and Stage classes.

0.0.14 - 13 Jan 2004 - emk

Vastly improved web browser integration, including the ability to embed
Internet Explorer using wxIE.

Scripting API changes:

  * HTML-related commands replaced with BROWSER-related commands.  See
    tamale.ss for details.
  * LOAD-PICTURE -> DRAW-PICTURE
  * WITH-DRAWING-CONTEXT -> WITH-DC
  * DRAWING-CONTEXT-RECT -> DC-RECT
  * PROP-BY-NAME -> PROP*
  * @-BY-NAME -> @*
  * SEND-BY-NAME replaced by more flexible SEND*
  * New syntax for relative pathnames: (@ relpath) -> @relpath
  * Added a MEASURE-PICTURE command.
  * Added an OFFSET-RECT command.
  * New MOUSE-GRABBED-BY? function.
  * New ENABLED? property on %BASIC-BUTTON%.
  * Support for (ON SETUP-FINISHED () ...) handlers.
  * New event types: BROWSER-NAVIGATE, BROWSER-PAGE-CHANGED,
    STATUS-TEXT-CHANGED, PROGRESS-CHANGED, UPDATE-UI, BROWSER-TITLE-CHANGED.

Other engine changes:

  * Added BrowserElement class to represent all web-browser-like elements.
    This includes foward/back/stop and set of standard events.
  * Added BrowserElementWx class to wrap the built-in wxHtmlWindow class.
  * Added BrowserElementIE class to wrap the wxIEHtmlWin class.
  * Support for vetoing events.
  * Added support for passing floating-point numbers to TCallbacks.
  * Modified PaintStage to only repaint the modified parts of the screen.
    This makes REFRESH slightly less likely to overdraw Widgets on the
    stage, but it does not fix the problem entirely.
  * Various bugfixes to wxIE library.
  * Added a function to convert DirtyLists to wxRegions.
  * Added support for opening pages in existing browser widgets from scripts.
  * Added basic support for forward, back, reload and stop buttons.
  * Added support for enabling and disabling forward/back/reload/stop buttons.
  * Fixed bugs which occurred when CLEAR-SCREEN and FILL-BOX were applied
    to transparent overlays with opaque colors.
  * Fixed bug which occurred when PNGs with 1-bit transparency were drawn
    onto transparent overlays.

0.0.13 - 6 Jan 2004 - emk

Basic drag & drop can now be implemented in Scheme.

  * Added support for (SET! (PROP elem name) value) in Scheme.  To support
    this on your templates, you need to implement an
    (ON PROP-CHANGE (name value prev veto) ...) handler.  Be sure to
    CALL-NEXT-HANDLER for properties you don't know about!  This API will
    probably change.
  * SET-ELEMENT-CURSOR! -> (SET! (PROP elem CURSOR) new-value)
  * Made several zone properties setable at runtime.
  * Overlays can now be moved.
  * Overlays no longer need to invalidate themselves when
    deleted--DrawingArea handles this internally.
  * Fixed some text-entry-related bugs.

0.0.12 - 5 Jan 2004 - emk

Graphics-related bug fixes:

  * Fixed bug where PNG's with 1-bit "mask" transparency were accidentally
    made transparent in too many places on 16-bit displays.
  * Fixed bug where opaque overlays with width N (where N*3 is odd) were
    reporting incorrect bmWidthBytes values under Win2K and causing raw
    access to look funny.

0.0.11 - 30 Dec 2003 - emk

TRANSPARENT OVERLAYS!  Added support for alpha-composited layers.  This
engine will require script updates:

  * SET-ZONE-CURSOR! has been renamed to SET-ELEMENT-CURSOR!.
  * RECT objects now (more) consistently exclude their right and bottom
    edges.  This may cause off-by-one errors in existing drawing code.
  * COLOR now represents opaque alpha values as 255 and transparent values
    as 0.  This is the opposite of the previous behavior.

Changes to Scheme Runtime:

  * Added :OVERLAY? and :ALPHA? to ZONE.  These allow you to create a
    rectangular zone with an associated drawing context (and optionally an
    alpha channel).  If :OVERLAY? is true, the zone must be rectangular.
  * Added (WITH-DRAWING-CONTEXT ZONE BODY...), which allows you to change
    the current drawing context.  Do not call IDLE within this form.
  * Added (DRAWING-CONTEXT-RECT), which returns the bounding rectangle
    for the current drawing context.
  * Added (COLOR-AT POINT), which returns the color at POINT in the
    current drawing context.
  * Fixed output routines to know about POINT, RECT and COLOR objects.
  * Support for storing POINT, RECT and COLOR objects in engine variables,
    including DEFINE/P.
  * Support for comparing POINT, RECT and COLOR objects with EQUALS?.

Changes to Tamale:

  * Added an Overlay class.  This is basically a square zone with its
    own (possibly transparent) DrawingArea and special hit-testing logic.
  * Switched from 0 opaque to 255 opaque, for performance and consistency
    with windows.
  * Support for TPoint, TRect, GraphicsTools::Color in engine variables.
  * TRect <-> wxRect conversion functions now reliably exclude right and
    bottom edges.
  * Added CompositeInto functions to Element and DrawingArea, for use with
    alpha-compositing.
  * DrawingAreas may now have alpha-channels.
  * Added alpha-channel support to DrawingArea::Clear.
  * Modified optimized versions of FillBox and DrawPixMap to use a
    templated transfer function, and added a transfer function for using
    them with DrawingAreas with alpha channels.
  * Fixed many bugs with arguments to DrawingArea::InvalidateRect.
  * Added support for retrieving pixel values.
  * Added support for pushing and poping drawing contexts.
  * Implemented a much-more-sophisticated list of dirty regions for use
    with the compositing.
  * Idling not allowed when a drawing context is pushed.
  * Replaced our single offscreen buffer with a compositing pixmap and
    and a background pixmap.
  * Invalidate an element's location when deleting it.

Changes to wxWindows:

  * Exported AlphaBlend from the MSW wxDC class, so we can do alpha blends
    between arbitrary DCs.
  * Removed wxBitmap::UngetRawData pre-multiplication code--there wasn't
    any matching code in wxBitmap::GetRawData, and many raw algorithms
    are much more efficient on pre-multiplied data.

0.0.10 - 19 Dec 2003 - emk

Lots of work to eliminate all Scheme memory allocation ("consing") while
idling.  This should fix video performance problems.

  * Added a cache of Scheme "buckets" (variable storage locations) so
    we don't have to allocate memory every time C++ needs to find something
    in the Scheme runtime.
  * Tweaked the idle interface so we don't need to call 'apply'.

Other changes:

  * Put in some stubs for allowing different font-sizes in edit boxes.

0.0.9 - 11 Dec 2003 - emk

  * Limited maximum chirp rate for new Geiger synth.
  * Added a ':multiline?' parameter to edit-box.  See 5Ltest_wx for samples.

0.0.8 - 17 Nov 2003 - emk, brian

  * Added SET-MEDIA-BASE-URL! function.  Pass it either a QuickTime-
    compatible URL or #f (to use the hard drive).
  * Major refactorings of Scheme runtime to help make it testable.
  * Fixed bug where api.ss didn't get recompiled when kernel.ss changed.
  * Split StageFrame out of Stage.
  * Split DrawingArea out of Stage.
  * Reduced coupling between nodes.ss and kernel.ss.
  * Made element deletion the responsibility of Scheme.
  * More work on Geiger audio synth.
  * Turned on QuickTime safe mode to avoid nasty performance problems
    with Boehm.
  * Merged TQTMovie changes from FiveL 3.4.

0.0.7 - 2 July 2003 - emk, brian

  * All known audio artifacts in Geiger synth and looping Vorbis
    playback have now been fixed.
  * PARAM renamed to PROP.
  * Major restructuring of template property binding.
  * EVENT-CHARACTER now returns a character, not a string
  * PROP and SEND no longer need their name argument to be quoted
  * Support for screenshots: (SCREENSHOT) will write the current screen
    to a file in the Screenshots directory
  * ON handlers may now return a value
  * Scheme elements don't need to have corresponding C++ elements
  * More or less everything can have an idle handler now
  * Added a MOUSE-MOVED event.
  * New TestCase classes based on xUnit.  These run within the engine.
  * Lots of improvements in build performance.

0.0.6 - 4 June 2003 - emk, brian

Audio work by emk:

  * Mono Vorbis audio supported.
  * Per-channel volume supported.
  * Looping Vorbis audio.
  * Basic real-time Geiger synth implemented.  It still has issues.

Polygon work by brian:

  * Added support for polygons (POLYGON point ...).
  * Added support for polygonal zones (ZONE name poly callback). Rects
    still work: (ZONE name rect callback) will convert the rect to a
    polygon.
  * Added support for copying polygon definition strings to clipboard
    using crosshair control. 

0.0.5 - 30 May 2003 - emk

A very primitive audio layer, with Vorbis support.  I'm making a release so
the media folks have something to play with.

  * Integrated portaudio audio output library.
  * Integrated libivorbisdec (a.k.a. "Tremor") integerized Ogg Vorbis
    audio decoder.
  * Added new VorbisFile class for loading Ogg Vorbis streams (incomplete).
  * Added new AudioStream class for streaming audio output.
  * Added VorbisAudioStream and SineAudioStream classes.
  * Refactoed IMediaElement interface out of MovieElement.
  * Added AudioStreamElement class.
  * New functions: VORBIS-AUDIO and SINE-WAVE.  These are mostly for
    testing at this point.
  * We no longer drop Vorbis samples during playback (I hope!).

0.0.4 - 28 May 2003 - emk, brian

  * Changed CARD syntax to (CARD name () body ...).
  * Allowed GROUP and SEQUENCE to have initialization code:
    (GROUP name () body ...).
  * Can define templates for card groups, cards and elements.
  * Can create temporary elements using CREATE.  These get deleted
    when exiting the card.
  * Can access template parameters directly, or by using PARAM.
  * DRAW-BOX now honors alpha value of color argument.
  * Event handling system moved into kernel.ss and redesigned.
  * Callbacks are now re-entrant.
  * New events: MOUSE-DOWN, MOUSE-UP, MOUSE-ENTER, MOUSE-LEAVE.
  * New functions: MOUSE-GRAB, MOUSE-UNGRAB, MOUSE-GRABBED?.
  * ZONE, MOVIE, HTML and EDIT-BOX now use element templates
    internally.
  * Third-party code with vague or unknown licenses should
    be pulled from the tree.

0.0.3 - 9 May 2003 - emk, brian

  * When switching from 3D to 2D, blit the Quake display into our
    offscreen buffer to avoid an ugly "cut to black".
  * Renamed PAUSE and RESUME to MOVIE-PAUSE and MOVIE-RESUME.
  * Modified the (REFRESH ...) command to do something useful in the new
    engine.  However, since there's no way to mark the screen as having
    been repainted, this leads to duplicate painting.  Fixing this
    is fairly hard.
  * Fixed loading of alpha channels and alpha channel memory
    allocation bug.
  * Implemented crossfades.  Use (REFRESH :transition 'crossfade :ms 500).
  * Implemented built-in timing of transitions, to make different machines
    more consistent.
  * Implemented more transitions: wipeleft, wiperight, wipeup, wipedown,
    pushleft, pushright, pushup, pushdown, toblack, fromblack.
  * Reimplemented FADE and UNFADE commands using timed transitions.
  * When in cross-hair mode, right-clicking will copy the current point
    to the clipboard.  Shift-right-clicking will copy the previous and
    current points to the clipboard as a rectangle.
  * Added support for saving current offcreen buffer. Use
    SAVE-GRAPHICS and RESTORE-GRAPHICS. To save or restore a
    particular rectangle, use (SAVE-GRAPHICS :bounds (rect ...)) or
    (RESTORE-GRAPHICS :bounds (rect ...))
  * Very naive implementation of screen resizing--this has no sanity
    checks, no warnings, and probably dies a miserable death if
    multiple monitors are involved.  However, it does fix the bug
    where windows would not be properly centered in full-screen mode.

0.0.2 - 3 May 2003 - emk, brian

Now that we're producing real builds again, we're going to start keeping
this file up to do date.

What's happened since last update:

  * The engine was renamed to Tamale.
  * We added lots of new features.  It's beginning to resemble a real
    program.

New in this build:

  * Sequences, alpha channels, convenience features in the GUI,
    support for Swindle, pausing and resuming movies, etc.

0.0.? - emk

Primitive support for running Quake 2 from within wx5L.

  * Added primitives to show/hide widgets, and perform some other
    basic operations.
  * Replaced background wxPanel with wxWindow to 
  * Added Quake2Engine class.
  * Added support for Reload Script when Quake is running.
  * Added many primtives for interacting with Quake.
  * Added support for attaching Scheme callbacks to Quake commands.

3.5.11 - 19 Nov 2002 - emk

Regular 5L:

  * Wrote code to release script resources before retrying a failed
    script load.

wx5L:

  * Added wx/src/AppConfig.h, which can be used to enable and disable
    various GUI features on a per-platform basis.
  * Made the LocationBar class inherit from either wxComboBox or
    wxTextCtrl, depending on which is more likely to work on a given
    platform.

3.5.10 - 6 Nov 2002 - emk

wx5L:

Working on making wx5L portable.  The Windows wx5L build is slightly
broken; I'll fix it once the portable code is happy.

  * Added FIVEL_NO_MOVIES define to supress use of QuickTime in wx5L builds.
  * Refactored MovieWindow into two classes: MovieWindow, which does
    nothing, and MovieWindowQT which does all the work.  Refer to
    MovieWindowNative to get the right one on a given platform.
  * Wrote scripts to convert *.ico and *.bmp files to *.xpm files.
  * Added AppGraphics.h and AppGraphics.cpp, which import xpm files.
  * Checked in some other utility scripts, and updated 5L-stats.

Regular 5L:

Added type information to 5L variables, and replaced (var ...) with a more
powerful form of (define ...).  These changes should make Scheme more
pleasant for content authors.

  * TVariable now stores type information.
  * Added SetTyped primitive, and replaced VariableExists with
    VariableInitialized.
  * Added support for "symbol" arguments to primitives.  These correspond
    to Scheme symbols, and should eventually be used when a primitive
    argument refers to a variable name (or one a small, fixed set of strings).
  * Fixed bugs in TVariable's unsigned integer handling.
  * Removed TYPE argument from call-5l-prim, engine-var, etc.
  * Renamed DEFINE-PERSISTENT-VARIABLE to DEFINE/P.
  * Updated fake-engine.ss to mimic new engine, and fixed bug in tool.ss.

3.5.9 - 31 Oct 2002 - emk

  * New wxWindows front-end now officially added to the build tree.
    This is still massively incomplete, but it's on its way.
  * Lots of compilation flag tweaks, to get all the various Win32 projects
    on the same page re: threads, RTTI, exceptions, etc.
  * CryptTool removed as first step in preparing for open souce release.
    This will simplify our legal issues a bit.
  * Linux build fixes.
  * Fixed bug where MacOS X 5L always played the same video from the CD.
  * Converted all *.rsrc and *.PPob files to *.r files, and included
    instructions on converting them back and forth.  This will allow us
    to play a bit more nicely with CVS, and eliminate all but a few
    files with resource forks from our CVS repository.
  * Source tree re-organization:
    - Common/libs -> libs
    - Common/freetype2 -> libs/freetype2
    - Rename Common/Runtime/5L/*.ss to have lowercase names
    - Linux, Mac, Win32 build fixes

3.5.8 - 15 Oct 2002 - emk

Engine:

  * The Windows engine now reloads scripts in the same fashion as the
    Mac engine--if a load fails, you get a chance to retry it.
  * Log files get flushed after every line.
  * The LOG and SCHEMEIDLE primitives are no longer logged, to reduce
    clutter in Debug.log.
  * Fixed tons of bugs in places where the Windows engine assumed it
    had a TInterpreter object, but didn't (i.e., lots of "sInstance"
    assertions are gone).
  * Added support for measuring text without drawing it.
  * Added support for checking whether an engine variable is initialized.
  * Made sure LCursor initializes mForceShow.

Runtime:

  * Support for compiling *.ss files to *.zo files automatically
    (incomplete--it only handles modules loaded with REQUIRE right now).
  * Support for deferring code until the engine is in a safe place to
    run it.  This means that you can call VIDEO, INPUT, etc., from
    within a callback.
  * The syntax of 'for' loops has been simplified.
  * Explicit support for using stylesheets with the INPUT command.
  * Added 'card-exists?' predicate.
  * Fixed bug in 'member?'.
  * Added support for using (var ...) declarations within 'lambda', 'define'
    and 'let'.
  * Added support for initializing engine variables.
  * Made call-5L-prim handle return values of non-string types gracefully.
  * Fixed bugs causing centered and left-aligned text to be measured
    incorrectly.
  * Added a hook system based on Emacs.

3.5.7 - 9 Oct 2002 - emk

Engines built from this code will require script changes.

  * Scheme: Changed 'for-each-item' to 'foreach', and added 'for'.
  * Added extract-docs.pl, which generates HTML manuals.
  * Added many new test cases for the new 5L language.
  * Fixed minor bugs in CryptStream*.*, as discovered by valgrind.
  * All primitives which used to take palette indices now take RGB colors.
  * Old 5L: Added DEFPALETTE command for declaring palettes without
    BMP files.  This provides backwards compatibility for old code.
  * Removed Windows cursor-clipping code because it was occassionally
    immobilizing the cursor completely.

3.5.6 - 3 Oct 2002 - emk

  * Refactored CHeader in the same fashion as Header and TStyleSheet,
    which should allow headers (and therefore input) to be used from
    Scheme.  This may also fix a redoscript problem in old5l.
  * Merged "cursor during video" fix from 3.4.2.
  * Built new Windows engines with the MzScheme 202 code.  You'll
    need to get the newest version of the appropriate libmzsch and
    libmzgc DLLs.

3.5.5 - 2 Oct 2002 - emk

Preliminary MzScheme support for Macintosh engine.  DO NOT BUILD THE
NON-CARBON POWERPC BUILD!  WHEN RUN UNDER OS X'S OS 9 EMULATOR, IT WILL
CORRUPT YOUR OS 9 SYSTEM FILE.

For legal reasons, this Macintosh engine SHOULD NOT BE DISTRIBUTED outside
of IML until we do our open source release.  It's statically-linked against
the LGPL'd MzSchemeLib, which would require us to jump through some
annoying hoops if we wanted to ship proprietary binaries.

User-visible changes:

  * This engine supports both legacy 5L and Scheme.
  * No PowerPC build.
  * No more start scripts.  Move everything into your main script.
  * No more switching between scripts.
  * CD ejection and fades are gone, thanks to the fact this build is
    Carbon-only.

Engine changes:

  * Created CodeWarrior project for MzSchemeLib, to avoid the pay-per-view
    cage match between MPW StdCLib and Metrowerks Standard Library over
    who's going to link with what.
  * Fixed MzScheme's call to PBGetCatInfo to work under Carbon.
  * Added code to explicitly set Boehm GC stack base on the Macintosh.
    Boehm can't figure this out without help, and will crash on startup.
  * Namespace fixes to make things compile on the Mac.
  * Made a mess of the MzSchemeLib MPW build infrastructure trying to get
    things to work.  I'm checking in my hacked-up version because (1) it
    marginally works and (2) we might need it again someday.
  * Removed a number of unused files with licensing problems, and sorted
    the rest of the problematic files into categories.
  * Changed event-handling model to give the TInterpreterManager object
    control, instead of the traditional PowerPlant::LApplication::Run
    method.  This requires us to roll our own version of Run and do some
    tricky event handling in CMac5LApp::MacIdleProc.  But it also means the
    Mac engine now supports arbitrary interpreters.  This change has lots
    of consequences, most of them complicated--and it may affect stability.
  * CPlayerView is now more careful about checking whether a TInterpreter
    object actually exists before calling methods on it.
  * Renamed MakeNewIndex methods to ProcessTopLevelForm.
  * Moved all old5l-related files into Mac/Source/lang/old5l.
  * Moved interpreter-managing code into TMac5LInterpreter.{h,cpp}.
  * Moved file-related primitives into TMac5LPrimitives.cpp.
  * Shift-scripts are gone.
  * Ripped out support for switching scripts.
  * Reimplemented script reloading, exiting, etc., using the
    TInterpreterManager interface.
  * Lots of changes to the Macintosh project files.
  * Updated Windows interpreter to newest MzScheme release.
  * Fixed the Linux build.

Headers (and therefore text input) are only available to the old 5L
language.  This will change soon.

3.5.4 - 21 Aug 2002 - emk

Engine:

  * Moved many source files from Common to Common/lang/old5L, and from
    Win32/FiveL to Win32/FiveL/lang/old5l, including the index system, the
    parser and stream classes, the crypto classes and the file I/O classes.
  * Broke the dependencies between Header and TIndex, in a fashion similar
    to what I did for TStyleSheet in 3.5.1.  This means we can call
    INPUT from Scheme, which more-or-less completes the Scheme primitives.
  * Made sure that header and stylesheet names were case insensitive.

Runtime:

  * Implemented a DrScheme IDE plugin with fairly good support for the
    5L language.  We may need to tweak this slightly later on.
  * Fixed the 5L-Loader and 5L-tool to initialize namespaces in the same way.
  * Implemented and documented lots of nice, high-level wrappers around
    the most error-prone of the low-level primitives.
  * Implemented DEFINE-STYLESHEET, which allows an author to declare
    headers and stylesheets at the same time, and to base them off earlier
    stylesheets.
  * Merged in Brian's WITH-TRACING macro.
  * Merged in Brian's support for variable interpolation.

3.5.3 - 18 Aug 2002 - emk

Changes to support the rapidly-growing test suites.

Engine:

  * Renamed _error variable to _errorcode to avoid conflicting with the
    _error variable used by the 'video' command (which we'll probably
    need to clean up sometime, but that's life).  This will affect
    scripts which call the BROWSE command, but not much else.

Runtime:

  * Implemented DEFINE-ENGINE-VARIABLE, which provides transparent
    binding between Scheme and 5L variables.
  * Added *TEXT-X*, *TEXT-Y*, *GRAPHIC-X* and *GRAPHIC-Y* variables,
    which are bound to _INCR_X, INCR_Y, _Graphic_X and _Graphic_Y.
  * Added WHILE and FOR-EACH-ITEM loops.
  * Added HAVE-5L-PRIM? and REFRESH functions.
  * Modified JUMP function to use JUMP primitive when available, so video
    gets killed when jumping between cards.
  * Refresh the screen at the end of each card.

3.5.2 - 18 Aug 2002 - emk

  * Modified the TSchemeInterpreter class to make intelligent use of
    namespaces and modules.
  * Fully modularized the runtime, and made the lispish language extensions
    available.  The "lispish" code currently belongs to me (and is released
    under the LGPL), but I'll be happy to relicense it to the Trustees.
  * Got redoscript to work--we no longer attempt to restart the entire
    Scheme interpreter; we merely throw away a sandbox.
  * Moved the code for resetting stylesheets out of the TWin5LInterpreter
    and into the main Win32 engine.

3.5.1 - 16 Aug 2002 - emk

Added support for defining stylesheets in Scheme.  This means that Scheme
can draw text!  (The INPUT doesn't work yet, because this relies on the
separate, not-yet-fixed header system.)  This involved lots of refactoring.

  * Created TTopLevelFormProcessor as an abstract superclass of
    TIndexManager, and modified TParser to use TTopLevelFormProcessor.
    This allows the legacy 5L language to contain non-TIndex tlfs.
  * Implemented a TPrimitiveTlfProcessor class, which allows
    top-level-forms to be implemented as calls to regular 5L primitives.
  * Yanked our ValueOrPercent support from TStream into the
    TArgumentList superclass, and implemented it for all TArgumentList
    subclasses.  This allows non-5L languages to specify the funky 
    percentage arguments used by the DEFSTYLE command.
  * Removed all TIndex/TIndexManager support from TStyleSheet, and
    reimplemented it using an STL std::map.  This breaks the dependencies
    between stylesheets and the old 5L interpreter.
  * Implemented a DEFSTYLE primitive.

3.5.0 - 16 Aug 2002 - emk, zeb

Preliminary Scheme support for Windows.  The Macintosh build is broken
until Brian updates the event loop to use a TInterpreterManager object
and figures out how to get the mzscheme libraries building.

  * Imported Boost library (from http://www.boost.org/) into CVS.
  * zeb: Moved some primitives from TMacPrimitives.cpp and TWinPrimitives.cpp
    to TCommonPrimitives.cpp and T5LPrimitives.cpp.
  * zeb: Added a GET primitive.
  * zeb: Cleaned date stuff out of LUtil.{h,cpp}.
  * First work on Scheme.
  * Overhaul of the Windows event handling system.
  * The interpreter now calls the idle loop, instead of vice versa.
  * Redoscript is now handled by a TInterpreterManager object.
  * It's no longer possible to switch between scripts.
  * Updated TSchemeInterpreter to use new event loop system.
  * Filled in lots of missing Scheme support.
  * Converted kernel.ss to use an internal state machine.
  * Implemented various timer systems.
  * Preliminary Windows integration.
  * Fixed nasty "Minimize when backgrounded" behavior when running in
    windowed mode (this was driving me crazy while debugging).
  * Ported 3.4.1 changes to the development branch.

3.4.2 - 28 Sep 2002 - emk

  * Fixed bug where cursor was visible during movie playback.  This bug
    was introduced when the movie controller patches were added.

3.4.1 - 14 Aug 2002 - emk

Language bugfixes/enhancements/changes for HIV Prevention Counseling.  I
removed some deeply-buried bugs in TStream and elsewhere, so please test
this build thoroughly.

  * New entities: &shy;, &nbsp;, and &radic;.  I've also added
    &check; and &cross;, but we don't have the necessary font support yet.
  * TStream now handles whitespace rationally.  String literals are
    parsed verbatim, and the old "randomly munge whitespace" behavior
    has been fixed.  Most of the other changes are necessary consequences
    of this change.
  * Verbatim CR, LF and TAB characters in strings will be passed through.
    This may affect screen layout.
  * The (get ...) primitive has been backported from 3.5.
  * The '&' syntax has been removed.  Instead of '&foo$bar', you should
    now write '$(get foo$bar)'.
  * Entities don't need to be escaped any more: \&amp; -> &amp;.

Thanks to this cleanup, it was possible to implement several much-wanted
features without too much work:

  * New primitives: WHEN, UNLESS and WHILE.
  * BODY has been renamed to BEGIN, and longer prematurely evaluates all
    the variables in nested expressions.
  * Debug log improvements.

3.4.0 - 26 July 2002 - emk

  * Updated version numbers for official stable release!
  * Macintosh compilation fix in FileSystem.cpp.

3.3.21 - 26 July 2002 - zeb

  * Added FileSystem::ExistenceCheck, which we use to check for the
    existence of various files during the startup process (bug #937).

3.3.20 - 26 July 2002 - emk

A QA binge, thanks to RedHat's memprof, Bruce Perens' Electric Fence,
and Rational's Purify.

  * Linux build fixes so I can run memprof and Electric Fence.
  * Fixed a bug in TStream::GetStringArg when called on an empty stream.
    This is probably why we were seeing weird results when CHeader called
    TStream::more() too many times.
  * Fixed a buffer-overflow bug in TLogger when logging large messages.
  * Squashed a bunch of memory leaks in CryptStream.cpp.
  * Made new CryptStream auto_ptr code work under Windows.
  * PURIFY: Fixed memory leak in TBTree::Add of duplicate node.  We now
    notify the user if there are duplicate cards, macros, etc.
  * PURIFY: Fixed memory leak in TBTree destructor.
  * PURIFY: Fixed memory leak in ConfigManager destructor.
  * PURIFY: Fixed memory leaks when deleting DIBs.
  * PURIFY: Made sure we deleted offscreen GWorld when exiting.
  * PURIFY: Fixed memory leak in LBrowser.
  * PURIFY: Fixed memory leak in LFileBundle.
  * PURIFY: Fixed uninitialized memory reads when View methods were
    called before View::Init.
  * PURIFY: Made View::Draw a no-op before View::Init is called.
    (It seems that Windows causes us to call Draw too early.)
  * Added TOUCHCOUNT, TOUCHCOORDS and TOUCHACTIVATE commands so Douglas
    can build an automatic test monkey.  These are Win32-only, because
    the Mac touchzone system needs an overhaul and I don't want to
    mess with it right now (bug #1076).
  * Added StValueRestorer<> template class which can save and restore
    the values of variables in an exception-safe fashion.
  * Began code audit for exception safety (bug #1074).

3.3.19 - 24 July 2002 - emk

  * Cleaned up Win32 5L.log (bug #1057).
  * We now print the glyph cache size every 100K (bug #969).

3.3.18 - 23 July 2002 - emk

  * Forward-ported QtComponentVersion to the Mac (bug #1054).
  * Fixed redoscript/keybind race condition (bug #1036).
  * Added a top-level try/catch block on the Mac (bug #955).
  * Added error checking in Mac BROWSE (bug #1070).
  * Enlarged our growzone a bit, and made sure it's working.  This will
    help us determine if we have memory usage problems (bug #969).

3.3.17 - 23 July 2002 - emk

  * Fixed RETURN in macros (bug #1053).
  * Fixed typography exception when missing buttpcx graphic (bug #1039).
  * Made Win32 BROWSE return an error if it fails (bug #793).
  * Forward-ported QtComponentVersion to Win32 (bug #1054).
  * Performance tuned Win32 textaa (bug #933).
  * Added lots of try/catch wrappers on Win32 (bug #955).

3.3.16 - 19 July 2002 - emk

  * Fixed "b" parameter to defstyle (bug #1052).
  * Fixed Mac/Win32 engine to log missing macros to Debug.log (bug #1060).
  * Fixed Windows macro recursion (bug #1053).
  * Fixed debug-log discrepencies (bug #1064).
  * Fixed logging of Windows macro arguments (bug #1065).

3.3.15 - 17 July 2002 - brian

  * Fixed excessive error messages for missing button graphics (#1039).
  * This bug might still occur on Windows; it needs to be looked into.

3.3.14 - 15 July 2002 - brian, emk

  * Fixed GWorld flashing (bug #930).
  * Windows 3.3.13 fixes ported to the Macintosh.

3.3.13 - 15 July 2002 - zeb, emk

  * Language change: (IF cond true_cmd false_cmd) now takes arbitrary
    expressions for 'cond'.  The following new primitives have
    been added: AND, OR, NOT, contains, =, <>, <, >, <=, >=.
  * Added a new (LOG filename msg) command, which allows the programmer
    to write to "5L", "debug" and "MissingMedia" logs.
  * Major logging improvements: All primitives are now automatically
    logged in a standard format (bug #1003).
  * Adjusting of coordinates using origin is now logged.
  * Callbacks are now logged in a much more useful fashion.
  * Old arithmetic primitives now return a value (add, sub, div).
  * Added MakeQuotedString to TTemplateUtils and wrote a matching test suite.

3.3.12 - 10 July 2002 - brian

  * Made textAA and text log coordinates of bounding box (bug #979).

3.3.11 - 7 July 2002 - emk

Ported forward 3.2.0.x fixes (bug #1008).

  * Ported Win32 QuickTime 6/VP3 bugfix forward from 3.2.0.x.
  * Ported Win32 QuickTime 6 gamma bugfix forward from 3.2.0.x.
  * Ported Mac QuickTime 6 gamma bugfix forward from 3.2.0.x.
  * Ported Win32 line drawing bugfix forward from 3.2.0.x.
  * Fixed Win32 (touch ...) command to highlight touchzones more like the
    Macintosh.  (It now redraws the unhighlighted graphic at the end of the
    highlight sequence.)

3.3.10 - 7 July 2002 - zeb

  * Added a new Release-Notes.txt file.
  * Fixed a bug which caused LFileBundle to die with an assertion
    failure when importing an empty file.
  * New feature: Modulo primitive.  5L now supports Modulo(x,y).
    Syntax is (% x y).

OLDER LOGS, RECOVERED FROM CVS
------------------------------

3.3.9 - emk

  Highly experimental engine which makes _INCR_X, _INCR_Y, _Graphic_X and
   _Graphic_Y relative to the current origin.  This will break macros in
   existing code!

3.3.8 - emk

  5L language improvements, including nested expressions, return values and
  new primitives.

   * Expressions can now be nested: '(set x $(+ 2 $(* 3 5)))' will
     set 'x' to 17.  Nested expressions should be indented as follows:

       (set x $(+ $really_big_variable_1
                  $really_big_variable_2))

     ...that is, arguments should _stack in a column_.  I will be
     extremely anal about this if I'm reading your code.

   * '(return ...)' now takes an optional argument, which will be
     returned from the macro.  So you can define your own functions, too.

   * New primitives: +, -, *, /, truncate, float+, float-, float*,
     float/, strlen, substr, findsubstr, length, nth, haskey, getval.

  A note on Lisp naming conventions--when you create a new "data structure"
  type, you should generally name functions as follows:

   # Define a type 'pt' with members 'x' and 'y' using lists.
   (macrodef pt (return ($1 $2)))
   (macrodef pt-x (return $(nth 0 $1)))
   (macrodef pt-y (return $(nth 1 $1)))

   # Alternative implementation of a type 'pt2' using associative lists.
   # (You couldn't pass 'pt2' to a built-in command, but it's a nice small
   # example.)
   (macrodef pt2 (return (x $1 y $2)))      # (pt2 10 20) => (x 10 y 20)
   (macrodef pt2-x (return $(getval $1 x))) # (pt2-x ...) => 10
   (macrodef pt2-y (return $(getval $1 y))) # (pt2-y ...) => 20

  The function 'pt' is called the "constructor", and the functions 'pt-x'
  and 'pt-y' are called "accessors".

3.3.7 - emk

  Debug log updates, and error message if 5L is run without
  Mac5L.config or other support files.

3.3.6 - emk

  Fixed problems with BUTTPCX (and other?) highlighting.

3.3.5 - emk

  Merged the 'FiveL_3_3_4_refactor_lang_1' branch back into the trunk.
  This branch contained the following enhancements:

   * Most of the communication between the interpreter and the
     engine now goes through the interfaces defined in
     TInterpreter.h and TPrimitive.h.  Among other things, this
     refactoring makes will make it easier to (1) change the interpreter
     from 5L to Scheme and (2) add portable primitives that work
     the same on both platforms.
   * A new system for handling callbacks.

  I also slipped in the following, unrelated enhancements:

   * MacOS X fixes.  Classic Mac5L once again runs under OS X, and
     there is a new, not-yet-ready-for-prime-time Carbonized build.
   * Bug fixes from the "Fix for 3.4" list.

3.3.4.12 - emk

  Last build of the 'FiveL_3_3_4_refactor_lang_1' branch
  before merging.

3.3.4.11 - emk

  Refactored Mac code to move primitives from CCard.{h,cpp} to
  TMacPrimitives.{h,cpp}, and break most of the remaining dependencies on
  the 5L interpreter.

  Language changes: LOADPICK, RVAR and RNODE are gone.  I've also disabled
  the Mac PAUSE command until Douglas tells me how it should work.

  Testing: Please beat *very* hard on this build, and pay special attention
  to WAIT, NAP, TIMEOUT, and similar commands.

  Next up: I plan to merge this branch into HEAD tomorrow.

3.3.4.10 - emk

  Debug log message improvements on the Mac.

3.3.4.9 - emk

  Fixed _Origin_X, _Origin_Y on Windows, and added a "default style"
  parameter to "defstyle" on both platforms.

  The new syntax:

   (defstyle sample (Nimbus Roman No9 L) 12 r left 0xF0F0F000 0xFFFF0000)

   ...where r = "regular", b = "bold", i = "italic" and bi = "bold italic".

3.3.4.8 - emk

  Added (BODY ...) command on Mac, fixed arguments of BUTTPCX, TOUCH,
  and KEYBIND to match Win32 engine, and refactored Mac engine to more-or-less
  respect the TInterpreter interface.

  Things to test: REDOSCRIPT, redo-REDOSCRIPT (feed REDOSCRIPT a bogus script,
  try to fix it, then run REDOSCRIPT again), TOUCH, BUTTPCX, ORIGIN.

  Some low-level details:

   - Added a KillCurrentCard method to the TInterpreter interface.  This
     works a lot like Pause, but it cannot be resumed.
   - Added a rough-cut TMac5LInterpreter class (with some methods stubbed
     out, because they are not needed on the Mac--we should look at
     this API in detail and formalize it sometime after 3.4).
   - Modified CTouchZone to take TCallback objects.
   - Modified CPlayerView's keybinding support to take TCallback objects
     (and to use a std::map instead of a PowerPlant list class).
   - Began to separate special forms (IF, BODY, EXIT, RETURN) from other
     commands.
   - Moved ReadSpecialVariable_* methods out of CCard and into CMac5LApp.
   - Made sure CMac5LApp::mReDoReDo got initialized to false.
   - Merged OpenScript and OpenScriptAgain into one function.

3.3.4.7 - emk

  Carbonization of Mac build, support for running non-Carbonized build
  in MacOS X's OS 9 emulator, and basic support for 5L.prefs on the Mac.  The
  Carbon build isn't yet ready for prime time--see BugHunt for details--but it
  is good enough to use for engine development.

  * Language changes

   - CHECKDISC is gone; use CHECKVOL instead.
   - EJECT is disabled in the Carbon build, because Carbon has no way to
     identify CD drives reliably.  EJECT still works in the regular build.
   - Gamma fades are ignored in the Carbon build.
   - KEYBINDs must now be accessed with the Command key only--not Option.

  * Things to test

  Please be hugely brutal to 5L; this is a big update.

   - 8-bit systems, palettes, ORIGIN, EJECT on the non-Carbon build.

  * Internal changes

   - TException class (and all subclasses) now take a __FILE__ and __LINE__
     parameter.  This is ugly, but it allows me to debug 5L exceptions even
     without a working debugger (under the OS 9 emulator, for example).
   - FileSystem::Path::(DoesExist|IsRegularFile|IsDirectory) now rely on
     native MacOS File Manager calls instead of the broken MSL stat()
     function (which fails in the OS 9 emulator).
   - The ImlUnit test harness flushes its output more often.
   - Many data structure accessors (and such functions as c2pstr) have been
     replaced by their Carbon equivalents.
   - We now use PowerPlant accessors to get at the QuickDraw globals.
   - We now use PowerPlant calls in place of ValidRect and InvalRect.
   - Some very nasty code which set the palettes of our offscreen GWorlds
     has been removed (offscreen GWorlds have CLUTs, not palettes!).
     The various drawing commands now use gPaletteManager to map indexes
     to RGBColor values, and RGBForeColor to set the color--no more calls
     to ::PmForeColor on offscreen GWorlds, thank you!
   - The CMenuUtil code (which used low-memory system globals to hide
     and show the menu bar) has been removed entirely and replaced by
     calls to HideMenuBar and ShowMenuBar (which are present in 8.5 and
     Carbon).  This is much simpler, nicer, more portable and safer.
   - A bunch of code which had been disabled with #ifdefs has been
     removed entirely.  This mostly related to palettes and an obsolete
     version of the fade code which used GWorlds.
   - Code which used ROM-based KCHR resources to map option keys back to
     their unmodified key caps has been removed.  This means KEYBINDs
     can only be accessed using the Command key.
   - We assume Carbon systems always support the HFS file system (duh).
   - We use PowerPlant glue to access either StandardFile or Navigation
     Services, under OS 8/9 and Carbon, respectively.
   - Some old subroutines in CModuleManager appeared to have been
     snarfed from More Files, an old Mac utility library.  These have
     been moved into MoreFiles.{h,cpp}.

  * Known Carbon Problems

  Fades, ejecting CD-ROMs and playing QuickTime movies are all broken in
  the Carbon build.  Douglas has found a problem with ORIGIN.  It looks
  like we should continue to ship the OS 9 build for use with MacOS X,
  at least for next few months.

3.3.4.6 - 2002/06/12 19:42:36 - emk

  Fixed bug where the origin didn't get restored after each macro
  call.  (This bug was introduced in 3.3.4.5.)

3.3.4.5 - 2002/06/12 19:02:51 - emk 

  Moved Do* commands from Card.{h,cpp} to TWinPrimitives.{h,cpp},
  and broke the remaining dependencies between these primitive commands and
  the current 5L interpreter.  The TInterpreter and TPrimitives interfaces
  are now quite mature.

  *** Please beat very, very hard on this build.  I don't anticipate
  further changes to the Windows engine for a while. ***

  REMOVED COMMANDS: kill (use still), loadpick (use loadpic)
  NEEDS TESTING: origin w/macros, other uses of origin.  5L now
   sets the origin to 0,0 whenever it begins a new card, which
   should produce behavior identical to the old system, unless
   I've overlooked something.
  NEEDS TESTING: make sure all the commands are available, and
   have the right names.  I've checked this a dozen times
   by eye, but I might have overlooked something.

  The only remaining dependencies between the interpreter and the rest of
  5L are in the Header and TStyleSheet classes.  I'm postponing this last
  bit of cleanup until after 3.4.  Up next: Repeat the 3.3.4.{1-5} changes
  for the Macintosh.
 
3.3.4.4 - 2002/06/11 18:15:31 - emk

  Partial separation of primitives from interpreter, and
  various 5L language enhancements related to callbacks.

   - Finished fleshing out TArgumentList, added support for callbacks.
   - Made all built-in primitives access their arguments through the
     TArgument interface.
   - Implemented a BODY command.
   - Changed how the TOUCH, BUTTPCX and KEYBIND commands parse their
     callback arguments.  See below for details; you'll have to change
     some code.  This was necessary to move callback parsing into
     TStream's implementation of the TArgumentList interface.

  5L Language Changes
  -------------------

   * (KEYBIND ...) now takes an arbitrary command instead of a card name.
     As with TOUCH and BUTTPCX, variables are evaluated when the
     keybind is installed, not when it is invoked.  Examples:

       (keybind f (jump foo))
       (keybind a (add x 10))

   * You can now run a series of zero or more commands using (BODY cmd...).
     This should work with IF, TOUCH, BUTTPCX and KEYBIND.  Example:

       (body
         (set x 10)
         (set y 20))

     Commands such as WAIT, JUMP, NAP, etc., will not do what you expect
     unless they're the last statement in a BODY.  This is caused by the
     low-level design of the interpreter, and is non-trivial to fix.

     RETURN is also not BODY-friendly.

     When you pass a body to IF, TOUCH, BUTTPCX or KEYBIND, all the
     variables in the body will be evaluated *before* any code is run!

   * The arguments to BUTTPCX and TOUCH have been rationalized after
     consultation with Douglas.  The commands now work as follows:

       (TOUCH rect cmd [cursor [picture [point]]])
       (BUTTPCX picture point header label cmd [cursor])

     Note that the second callback has disappeared from both TOUCH and
     BUTTPCX; use BODY instead.

3.3.4.3 - 2002/06/10 17:52:48 - emk

  Added a TArgumentList class in TPrimitives.  This class provides
  an abstract interface to argument list parsing, and replaces parts of
  TStream.  This will allow us to begin breaking dependencies between
  the primitives and the nasty parsing gunk in TStream.

3.3.4.2 - 2002/06/05 20:42:29 - emk

  Broke Win5L dependencies on TIndex file by moving various pieces
  of code into TWin5LInterpreter.  Windows 5L now accesses the interpreter
  through a well-defined API.  Changes:

   * Removed many direct and indirect #includes of TIndex.h.
   * Added a TInterpreter method ReloadScript, which can be called by the
     higher-level ReDoScript command.
   * Checked in some files which should have been included in the 3.3.4.1
     checkin--these files contain the initial refactorings of Card and Macro
     callsites to go through the TInterpreter interface.

  Up next: Refactor various Do* methods out of Card and into a procedural
  database.

3.3.4 - 2002/05/29 13:58:10 - emk

  Fixed various crash-on-exit problems (including those in TBTree,
  TIndex and TLogger::FatalError), and reverted the Win32 _INCR_Y code
  to the behavior that shipped with Genetics.

3.3.3 - 2002/05/15 11:05:18 - emk

  Merged in changes from FiveL_3_3_2_emk_typography_merge branch.
  Synopsis: The Common code is now up to 20Kloc, anti-aliased typography is
  available, and several subsystems have been refactored.  For more
  detailed descriptions, see the CVS branch.

  The merged Mac code hasn't been built yet; I'll take care of that next.

  Added support for passing a "(pcent ...)" argument to "defstyle" to
  specify leading as a percentage of the base font size (and cleaned up a
  few minor test suite issues).

3.3.2.7 - 2002/05/01 07:10:49 - emk

  Fixed assertion failure on "Special Variables" screen, fixed
  missing bullets, and added "\&Delta;" and "\&delta;" entities for
  use with the (textaa ...) command only.

3.3.2.6 - 2002/05/01 03:27:02 - emk

  First Windows engine with (textaa ...) command.

   - Implemented a primitive, slow Image::DrawPixMap command that uses
     ::GetPixel and ::SetPixel to do alpha blending (shudder).  Strangely
     enough, it's about as fast as the somewhat optimized Mac routines.
     Anyone got a good GDI book?

   - Fixed several assertion failures.

  Known problems:

   - Occasional assertion failure on exit.  The reference-counting on
     TIndexFile claims it's getting dereferenced too many times.  This is
     an old bug; all the TBTree and TBNode classes are pretty dodgy.

   - Assertion failure on "Special Variables" screen in 5Ltest.  This is
     caused by overlong lines.

3.3.2.5 - 2002/04/30 07:57:24 - emk

  Port Win32 code to use the 20Kloc of Common code that now
  exists.  The (defstyle ...) command should work, but (textaa ...) isn't
  available yet.

  Next up: Implement the (textaa ...) command and the low-level
  GraphicsTools::Image::DrawBitMap.

3.3.2.4 - 2002/04/29 06:29:58 - emk

  Contains first set of performance tweaks, and fixes problem with
  assertion failures after reload and on CME screens.

3.3.2.3 - 2002/04/26 11:31:01 - emk

  Fixed highlight shadow color to default to regular shadow color (instead
  of highlight color, which is obviously wrong).

3.3.2.2 - 2002/04/26 08:51:21 - emk

  First experimental engine with (textaa ...) and (defstyle ...) commands.

  Changes:

   - Ported new TEncoding template class to the Mac.

   - Updated TStyleSheet to provide bug-for-bug compatibility with the way
     backslashed escaped sequences are processed.

??? - 2002/04/23 11:29:47 - emk

  Prepended "VERSION_" to the version-related preprocessor defines, because
  this way is (1) nicer and (2) matches the Mac engine's preprocessor
  defines.

??? - 2002/04/19 11:20:13 - emk

  Start of the heavy typography merging work.  I'm doing this on a branch
  so I don't cause problems for any of the other developers.

  Alpha-blend text colors.

  Merged Mac and Windows versions of several files into the Common directory.
  Not all of these work on Mac and/or Windows yet, but they're getting there.
  Primary sources for the merged code are:

   Win/FiveL/LVersion.h -> Common/TVersion.h
   Win/FiveL/LStream.h -> Common/TStream.h
   Mac/Source/CStream.cp -> Common/TStream.cpp
   Mac/Source/CStreamTests.cp -> Common/TStreamTests.cpp

  TStream changes:

   * The TStream code now uses a callback to variable values.  This will
     probably go away once Variable and CVariable get merged.
   * Input operators for std::string and GraphicTools::Color.

  Isolated Windows-specific code in TLogger.*, in preparation for a big merge.

   * Added a portable function to set up logging.
   * Fixed the logging code to use the portable FileSystem library.
   * Made FatalError actually quit the application.

  Turned off the FiveL namespace on FIVEL_PLATFORM_OTHER, so we can debug
  with GDB, which has a few minor but painful namespace issues.

  TString changes:

   * Made sure we can convert from std::string to a TString.
   * Added some more assertions.
   * Fixed bug in various operator= methods which would allow the string's
     internal data pointer to be NULL.
   * Changed operator[] and operator() arguments to be 'int' instead of
     'int32' to avoid nasty compiler warnings.

  Typography::Style changes:

   * Added a "ShadowOffset" field that specifies the offset of the
     drop shadow.
   * Added an operator== for testing.
   * Added a ToggleFaceStyle method for toggling specified face style bits.

  Typography::StyledText changes:

   * Added a method to append a single character.

  Other Typography changes:

   * Made FaceStyle an int, not an enum, so we can do bit math with it.
   * Added assertions to made sure you can't extract a StyledText iterator
     until you've called EndConstruction.

??? - 2002/04/19 10:21:52 - hyjin

  Added support for a movie controller in 5L applications, and deleted some
  buggy pre-roll code that appeared to be causing crashes.  We're not a
  hundred percent sure all the crashing problems are fixed, but things seem
  to be working very well.  Please test this extensively!

  Set global variable _bShowMC to see the movie controller (case insensitive).

  Changes by Yijin, reviewed by Eric Kidd.

EARLIER REVISIONS
-----------------

  Lots of work to create a Common/ directory from the platform-specific
  directories, followed by work to create a portable Typography and
  GraphicsTools library.

  For even earlier work, look at the ReleaseNotes.txt files in
  Mac/ and Win32/, which contain the history of the old, platform-specific
  engines before the merge.
