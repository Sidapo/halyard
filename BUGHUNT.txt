Table of Contents
-----------------

  * Where to Find 5L's Bug Tracker
  * What Goes in the Bug Tracker
  * Writing a Good Bug Report
  * Conventions
  * The Life Cycle of a Bug

Where to Find 5L's Bug Tracker
------------------------------

Go to mccay.dartmouth.edu, click on BugHunt, and log in.  If you don't have
an account, go ask Mark or Lisa for help.  All of the bugs for 5L are kept
in the "FiveL" category.  (Ignore the "Mac FiveL" category; it's obsolete.)
Play around with the search options and have a bit of fun.

What Goes in the Bug Tracker
----------------------------

Pretty much anything about 5L you'd like to see fixed or enhanced.  If it
isn't in the bug tracker, then the programmers are probably going to worry
about the nine zillion other things they need to fix.

The bug tracker is how the programmers keep track of everything they need
to do--and everything they'll need to know along the way.  The procedures
described below are based on common bug-tracking techniques, but in a
simplified form.

Writing a Good Bug Report
-------------------------

A good bug report includes three things:

  1) How to reproduce the problem.  Give us a simple, straightforward set
     of steps which any programmer or tester in the building could follow
     to recreate the problem.  (You'll probably want to include things like
     version numbers, operating systems, and the names of 5Ltest cards
     which exhibit the problem.)

  2) What happens when you follow those steps.

  3) What you think *should* happen when you follow those steps.  Be
     precise; you'll usually get exactly what you ask for.

Any of our coders should be able to follow steps in (1), and immediately
tell whether they're seeing (2) or (3).

If you're feeling ambitious, you can look at the bug-reporting conventions
below, and include some extra information.  But you're not required to do
so.

Conventions
-----------

The priorities work as follows:

  Highest (*****): This bug makes 5L completely unusable by the end user.
      Good examples include easy-to-find crashing bugs, total failure of
      video playback, no text, etc.

  High (****): These bugs don't prevent the user from running 5L, but they
      either (1) bring all script development to a screeching halt, (2)
      make our programs look like they were designed by completely
      incompetent bozos, or (3) severely inconvenience the user.  Broken
      redoscript, nasty visual artifacts or major performance problems fall
      into this category.

  Normal (***): These bugs are unpleasant, but can generally be worked
      around.

  Low (**): Fix 'em if you have a spare moment.

  Lowest (*): Fix 'em if you're bored out of your skull.

The categories are used to mark the milestone by which we're planning to
fix the bug.  Typical categories are "3.2.x" or "4.0".  We also create the
occasional oddball category--"Carbon", for example, contains all the bugs
we'd have to fix if we ever wanted to ship the Carbonized version of Mac
5L.

The Life Cycle of a Bug
-----------------------

The original submitter adds a bug to BugHunt, and possibly asks BugHunt to
notify a programmer about it.

The users and the programmers fool around with the priority and category of
the bug.  This is an ongoing activity for much of the bug's life. :-)

If a programmer decides a bug is too vague, or if she can't reproduce the
bug on her own machine, she moves it from "Open/Unfixed" to "No Repro", and
asks BugHunt to notify the original submitter.  The original submitter can
then add some more information, and move the bug back to "Open/Unfixed".

If somebody decides a bug is unfixable--or that it should be completely
ignored for some other reason--he moves it from "Open/Unfixed" to "Set
Aside".

If a programmer fixes a bug, she moves it from "Open/Unfixed" to
"Fixed/Untested".  NOBODY ELSE SHOULD DO THIS.  IF YOU DIDN'T FIX THE BUG,
DON'T MARK IT AS FIXED.  Programmers may not be done with the bug, so be
nice, and leave the final call to them.

If the original submitter (or another end-user) verifies that the bug is
fixed, he moves it from "Fixed/Untested" to "Closed/Tested".  NOBODY ELSE
SHOULD DO THIS.  IF YOU DIDN'T REPORT A BUG--AND YOU'RE NOT ONE OF THE
TESTERS--DON'T MARK IT AS CLOSED.  It's too easy to misunderstand other
people's bug reports, so be nice, and leave the final call to them.

If somebody decides the bug is still not fixed, or that the programmer has
left out some important detail, then he can move the bug from
"Fixed/Untested" to "Open/Unfixed".
